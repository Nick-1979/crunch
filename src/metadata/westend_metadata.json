[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem<Hash>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ChangesTrieRoot",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ChangesTrieSignal",
                      "fields": [
                        {
                          "type": 15,
                          "typeName": "ChangesTrieSignal"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "ChangesTrieSignal"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewConfiguration",
                      "fields": [
                        {
                          "type": 16,
                          "typeName": "Option<ChangesTrieConfiguration>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 17
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 17
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "sp_core",
                "changes_trie",
                "ChangesTrieConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "digest_interval",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "digest_levels",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "sequence": {
                  "type": 19
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 20
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 127,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 20,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 128,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "westend_runtime",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 21,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "pallet_indices::Event<Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "pallet_staking::Event<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Offences",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_offences::Event"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 34,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 35,
                          "typeName": "pallet_grandpa::Event"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_im_online::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "pallet_identity::Event<Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "pallet_recovery::Event<Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "pallet_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 58,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "pallet_proxy::Event<Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "pallet_multisig::Event<Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "pallet_election_provider_multi_phase::Event<Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "BagsList",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "pallet_bags_list::Event<Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "ParaInclusion",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "parachains_inclusion::Event<Runtime>"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Paras",
                      "fields": [
                        {
                          "type": 81,
                          "typeName": "parachains_paras::Event"
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Ump",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "parachains_ump::Event"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Hrmp",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "parachains_hrmp::Event<Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Registrar",
                      "fields": [
                        {
                          "type": 87,
                          "typeName": "paras_registrar::Event<Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Slots",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "slots::Event<Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Auctions",
                      "fields": [
                        {
                          "type": 89,
                          "typeName": "auctions::Event<Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Crowdloan",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "crowdloan::Event<Runtime>"
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "XcmPallet",
                      "fields": [
                        {
                          "type": 91,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 99
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully. \\[info\\]"
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "DispatchError"
                        },
                        {
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed. \\[error, info\\]"
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new \\[account\\] was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An \\[account\\] was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened. \\[origin, remark_hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": "index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "error",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAssigned",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A account index was assigned. \\[index, who\\]"
                      ]
                    },
                    {
                      "name": "IndexFreed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A account index has been freed up (unassigned). \\[index\\]"
                      ]
                    },
                    {
                      "name": "IndexFrozen",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A account index has been frozen to its current account ID. \\[index, who\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance. \\[account, free_balance\\]"
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss. \\[account, balance\\]"
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded. \\[from, to, value\\]"
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root. \\[who, free, reserved\\]"
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved). \\[who, value\\]"
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "type": 30,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type.",
                        "\\[from, to, balance, destination_status\\]"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited into the account (e.g. for transaction fees). \\[who,",
                        "deposit\\]"
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees). \\[who, value\\]"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior). \\[who,",
                        "amount_slashed\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EraPaid",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The era payout has been set; the first balance is the validator-payout; the second is",
                        "the remainder from the maximum amount of reward.",
                        "\\[era_index, validator_payout, remainder\\]"
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The nominator has been rewarded by this amount. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "One validator (and its nominators) has been slashed by the given amount.",
                        "\\[validator, amount\\]"
                      ]
                    },
                    {
                      "name": "OldSlashingReportDiscarded",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An old slashing report from a prior era was discarded because it could",
                        "not be processed. \\[session_index\\]"
                      ]
                    },
                    {
                      "name": "StakersElected",
                      "index": 4,
                      "docs": [
                        "A new set of stakers was elected."
                      ]
                    },
                    {
                      "name": "Bonded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An account has bonded this amount. \\[stash, amount\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "Unbonded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An account has unbonded this amount. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                        "from the unlocking queue. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Kicked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A nominator has been kicked from a validator. \\[nominator, stash\\]"
                      ]
                    },
                    {
                      "name": "StakingElectionFailed",
                      "index": 9,
                      "docs": [
                        "The election failed. No new era is planned."
                      ]
                    },
                    {
                      "name": "Chilled",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An account has stopped participating as either a validator or nominator.",
                        "\\[stash\\]"
                      ]
                    },
                    {
                      "name": "PayoutStarted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_offences",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Offence",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "Kind"
                        },
                        {
                          "type": 10,
                          "typeName": "OpaqueTimeSlot"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "There is an offence reported of the given `kind` happened at the `session_index` and",
                        "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                        "\\[kind, timeslot\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the \\[session_index\\], not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "AuthorityList"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied. \\[authority_set\\]"
                      ]
                    },
                    {
                      "name": "Paused",
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "def": {
                "sequence": {
                  "type": 37
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "def": {
                "tuple": [
                  38,
                  8
                ]
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 39,
                      "typeName": "ed25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HeartbeatReceived",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "T::AuthorityId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new heartbeat was received from `AuthorityId` \\[authority_id\\]"
                      ]
                    },
                    {
                      "name": "AllGood",
                      "index": 1,
                      "docs": [
                        "At the end of the session, no offence was committed."
                      ]
                    },
                    {
                      "name": "SomeOffline",
                      "fields": [
                        {
                          "type": 43,
                          "typeName": "Vec<IdentificationTuple<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "At the end of the session, at least one validator was found to be \\[offline\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "def": {
                "sequence": {
                  "type": 44
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "def": {
                "tuple": [
                  0,
                  45
                ]
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_staking",
                "Exposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 46,
                      "typeName": "Balance"
                    },
                    {
                      "name": "own",
                      "type": 46,
                      "typeName": "Balance"
                    },
                    {
                      "name": "others",
                      "type": 47,
                      "typeName": "Vec<IndividualExposure<AccountId, Balance>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "def": {
                "sequence": {
                  "type": 48
                }
              }
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "pallet_staking",
                "IndividualExposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 46,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error. \\[index, error\\]"
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 2,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements). \\[who\\]"
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned. \\[who, deposit\\]"
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed. \\[who, deposit\\]"
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar. \\[who, registrar_index\\]"
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted. \\[who, registrar_index\\]"
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar. \\[target, registrar_index\\]"
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added. \\[registrar_index\\]"
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid. \\[sub, main, deposit\\]"
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed.",
                        "\\[sub, main, deposit\\]"
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account. \\[sub, main, deposit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoveryCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A recovery process has been set up for an \\[account\\]."
                      ]
                    },
                    {
                      "name": "RecoveryInitiated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A recovery process has been initiated for lost account by rescuer account.",
                        "\\[lost, rescuer\\]"
                      ]
                    },
                    {
                      "name": "RecoveryVouched",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been vouched for by sender.",
                        "\\[lost, rescuer, sender\\]"
                      ]
                    },
                    {
                      "name": "RecoveryClosed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been closed.",
                        "\\[lost, rescuer\\]"
                      ]
                    },
                    {
                      "name": "AccountRecovered",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Lost account has been successfully recovered by rescuer account.",
                        "\\[lost, rescuer\\]"
                      ]
                    },
                    {
                      "name": "RecoveryRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A recovery process has been removed for an \\[account\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked).",
                        "\\[account, unvested\\]"
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "type": 55,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "type": 56,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task. \\[task, id, result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 57
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 57
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given \\[result\\]."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 60,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "type": 61,
                          "typeName": "u16"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type. \\[anonymous, who, proxy_type,",
                        "disambiguation_index\\]"
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]"
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 60,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added. \\[delegator, delegatee, proxy_type, delay\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "westend_runtime",
                "ProxyType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "NonTransfer",
                      "index": 1
                    },
                    {
                      "name": "Staking",
                      "index": 2
                    },
                    {
                      "name": "SudoBalances",
                      "index": 3
                    },
                    {
                      "name": "IdentityJudgement",
                      "index": 4
                    },
                    {
                      "name": "CancelProxy",
                      "index": 5
                    },
                    {
                      "name": "Auction",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 63,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone.",
                        "\\[approving, timepoint, multisig, call_hash\\]"
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 63,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "CallHash"
                        },
                        {
                          "type": 56,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 63,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SolutionStored",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "ElectionCompute"
                        },
                        {
                          "type": 66,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A solution was stored with the given compute.",
                        "",
                        "If the solution is signed, this means that it hasn't yet been processed. If the",
                        "solution is unsigned, this means that it has also been processed.",
                        "",
                        "The `bool` is `true` when a previous solution was ejected to make room for this one."
                      ]
                    },
                    {
                      "name": "ElectionFinalized",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "Option<ElectionCompute>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The election has been finalized, with `Some` of the given computation, or else if the",
                        "election failed, `None`."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An account has been rewarded for their signed submission being finalized."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An account has been slashed for submitting an invalid signed submission."
                      ]
                    },
                    {
                      "name": "SignedPhaseStarted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The signed phase of the given round has started."
                      ]
                    },
                    {
                      "name": "UnsignedPhaseStarted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The unsigned phase of the given round has started."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ElectionCompute"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OnChain",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "index": 1
                    },
                    {
                      "name": "Unsigned",
                      "index": 2
                    },
                    {
                      "name": "Fallback",
                      "index": 3
                    },
                    {
                      "name": "Emergency",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 65
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 65
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Rebagged",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 8,
                          "typeName": "VoteWeight"
                        },
                        {
                          "type": 8,
                          "typeName": "VoteWeight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Moved an account from one bag to another. \\[who, from, to\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CandidateBacked",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "CandidateReceipt<T::Hash>"
                        },
                        {
                          "type": 78,
                          "typeName": "HeadData"
                        },
                        {
                          "type": 79,
                          "typeName": "CoreIndex"
                        },
                        {
                          "type": 80,
                          "typeName": "GroupIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A candidate was backed. `[candidate, head_data]`"
                      ]
                    },
                    {
                      "name": "CandidateIncluded",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "CandidateReceipt<T::Hash>"
                        },
                        {
                          "type": 78,
                          "typeName": "HeadData"
                        },
                        {
                          "type": 79,
                          "typeName": "CoreIndex"
                        },
                        {
                          "type": 80,
                          "typeName": "GroupIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A candidate was included. `[candidate, head_data]`"
                      ]
                    },
                    {
                      "name": "CandidateTimedOut",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "CandidateReceipt<T::Hash>"
                        },
                        {
                          "type": 78,
                          "typeName": "HeadData"
                        },
                        {
                          "type": 79,
                          "typeName": "CoreIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A candidate timed out. `[candidate, head_data]`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "CandidateReceipt"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "descriptor",
                      "type": 71,
                      "typeName": "CandidateDescriptor<H>"
                    },
                    {
                      "name": "commitments_hash",
                      "type": 9,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "CandidateDescriptor"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 72,
                      "typeName": "Id"
                    },
                    {
                      "name": "relay_parent",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "collator",
                      "type": 73,
                      "typeName": "CollatorId"
                    },
                    {
                      "name": "persisted_validation_data_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "pov_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "erasure_root",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "signature",
                      "type": 74,
                      "typeName": "CollatorSignature"
                    },
                    {
                      "name": "para_head",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "validation_code_hash",
                      "type": 77,
                      "typeName": "ValidationCodeHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "polkadot_primitives",
                "v0",
                "collator_app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "polkadot_primitives",
                "v0",
                "collator_app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 75,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 76,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "ValidationCodeHash"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "CoreIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "GroupIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CurrentCodeUpdated",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Current code has been updated for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "CurrentHeadUpdated",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Current head has been updated for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "CodeUpgradeScheduled",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A code upgrade has been scheduled for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "NewHeadNoted",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new head has been noted for a Para. `para_id`"
                      ]
                    },
                    {
                      "name": "ActionQueued",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A para has been queued to execute pending actions. `para_id`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "ump",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Upward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Upward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedUpward",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "type": 83,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Upward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached.",
                        "\\[ id, remaining, required \\]"
                      ]
                    },
                    {
                      "name": "UpwardMessagesReceived",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed.",
                        "\\[ para, count, size \\]"
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The weight budget was exceeded for an individual downward message.",
                        "",
                        "This message can be later dispatched manually using `service_overweight` dispatchable",
                        "using the assigned `overweight_index`.",
                        "",
                        "\\[ para, id, overweight_index, required \\]"
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Downward message from the overweight queue was executed with the given actual weight",
                        "used.",
                        "",
                        "\\[ overweight_index, used \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 84,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "TooMuchWeightRequired",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OpenChannelRequested",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Open HRMP channel requested.",
                        "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                      ]
                    },
                    {
                      "name": "OpenChannelCanceled",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 86,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An HRMP channel request sent by the receiver was canceled by either party.",
                        "`[by_parachain, channel_id]`"
                      ]
                    },
                    {
                      "name": "OpenChannelAccepted",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Open HRMP channel accepted. `[sender, recipient]`"
                      ]
                    },
                    {
                      "name": "ChannelClosed",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 86,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "HRMP channel closed. `[by_parachain, channel_id]`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HrmpChannelId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 72,
                      "typeName": "Id"
                    },
                    {
                      "name": "recipient",
                      "type": 72,
                      "typeName": "Id"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Registered",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Deregistered",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewLeasePeriod",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new `[lease_period]` is beginning."
                      ]
                    },
                    {
                      "name": "Leased",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A para has won the right to a continuous set of lease periods as a parachain.",
                        "First balance is any extra amount reserved on top of the para's existing deposit.",
                        "Second balance is the total amount reserved.",
                        "`[parachain_id, leaser, period_begin, period_count, extra_reserved, total_amount]`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuctionStarted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AuctionIndex"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An auction started. Provides its index and the block number where it will begin to",
                        "close and the first lease period of the quadruplet that is auctioned.",
                        "`[auction_index, lease_period, ending]`"
                      ]
                    },
                    {
                      "name": "AuctionClosed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AuctionIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An auction ended. All funds become unreserved. `[auction_index]`"
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                        "Second is the total. `[bidder, extra_reserved, total_amount]`"
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
                      ]
                    },
                    {
                      "name": "ReserveConfiscated",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve",
                        "but no parachain slot has been leased.",
                        "`[parachain_id, leaser, amount]`"
                      ]
                    },
                    {
                      "name": "BidAccepted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A new bid has been accepted as the current winner.",
                        "`[who, para_id, amount, first_slot, last_slot]`"
                      ]
                    },
                    {
                      "name": "WinningOffset",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "AuctionIndex"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The winning offset was chosen for an auction. This will map into the `Winning` storage map.",
                        "`[auction_index, block_number]`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new crowdloaning campaign. `[fund_index]`"
                      ]
                    },
                    {
                      "name": "Contributed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contributed to a crowd sale. `[who, fund_index, amount]`"
                      ]
                    },
                    {
                      "name": "Withdrew",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdrew full balance of a contributor. `[who, fund_index, amount]`"
                      ]
                    },
                    {
                      "name": "PartiallyRefunded",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The loans in a fund have been partially dissolved, i.e. there are some left",
                        "over child keys that still need to be killed. `[fund_index]`"
                      ]
                    },
                    {
                      "name": "AllRefunded",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "All loans in a fund have been refunded. `[fund_index]`"
                      ]
                    },
                    {
                      "name": "Dissolved",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Fund is dissolved. `[fund_index]`"
                      ]
                    },
                    {
                      "name": "HandleBidResult",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 56,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The result of trying to submit a new bid to the Slots pallet."
                      ]
                    },
                    {
                      "name": "Edited",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The configuration to a crowdloan has been edited. `[fund_index]`"
                      ]
                    },
                    {
                      "name": "MemoUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A memo has been updated. `[who, fund_index, memo]`"
                      ]
                    },
                    {
                      "name": "AddedToNewRaise",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A parachain has been moved to `NewRaise`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 111,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 120,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storate by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 121,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "\\[ destination, result \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 84,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "type": 126,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 93,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        },
                        {
                          "type": 94,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "xcm",
                "v1",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 96,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 96,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 96,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 98,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 100,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "def": {
                "compact": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 102,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "def": {
                "sequence": {
                  "type": 103
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 111,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 115,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 106,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 119,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 105,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "def": {
                "sequence": {
                  "type": 106
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 107,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 108,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 113
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 113
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "def": {
                "tuple": [
                  4,
                  84
                ]
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "xcm",
                "v0",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 107,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 118,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 92
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 92
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "Vec<v0::MultiAsset>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "v1::MultiAssets"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "def": {
                "sequence": {
                  "type": 123
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_asset",
                "MultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "All",
                      "index": 1
                    },
                    {
                      "name": "AllFungible",
                      "index": 2
                    },
                    {
                      "name": "AllNonFungible",
                      "index": 3
                    },
                    {
                      "name": "AllAbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "AllAbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "AllConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 124,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "AllConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 124,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "AbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 46,
                          "typeName": "u128"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "AbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "instance",
                          "type": 109,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "amount",
                          "type": 46,
                          "typeName": "u128"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "instance",
                          "type": 109,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_location",
                "MultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        },
                        {
                          "type": 125,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parent",
                      "index": 0
                    },
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 96,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 96,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 96,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 98,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "u128"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "OnlyChild",
                      "index": 8
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 100,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 124,
                          "typeName": "v0::MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "v1::MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "def": {
                "sequence": {
                  "type": 9
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "def": {
                "sequence": {
                  "type": 54
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 95,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 131,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 133,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "- 1 storage write.",
                        "- Base Weight: 1.405 µs",
                        "- 1 write to HEAP_PAGES",
                        "- 1 digest item",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_changes_trie_config",
                      "fields": [
                        {
                          "name": "changes_trie_config",
                          "type": 16,
                          "typeName": "Option<ChangesTrieConfiguration>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the new changes trie configuration.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "- 1 storage write or delete (codec `O(1)`).",
                        "- 1 call to `deposit_log`: Uses `append` API, so O(1)",
                        "- Base Weight: 7.218 µs",
                        "- DB Weight:",
                        "    - Writes: Changes Trie, System Digest",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 134,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set some items of storage.",
                        "",
                        "# <weight>",
                        "- `O(I)` where `I` length of `items`",
                        "- `I` storage writes (`O(1)`).",
                        "- Base Weight: 0.568 * i µs",
                        "- Writes: Number of items",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 136,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill some items from storage.",
                        "",
                        "# <weight>",
                        "- `O(IK)` where `I` length of `keys` and `K` length of one key",
                        "- `I` storage deletions.",
                        "- Base Weight: .378 * i µs",
                        "- Writes: Number of items",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function.",
                        "",
                        "# <weight>",
                        "- `O(P)` where `P` amount of keys with prefix `prefix`",
                        "- `P` storage deletions.",
                        "- Base Weight: 0.834 * P µs",
                        "- Writes: Number of subkeys + 1",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Make some on-chain remark and emit event.",
                        "",
                        "# <weight>",
                        "- `O(b)` where b is the length of the remark.",
                        "- 1 event.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "def": {
                "sequence": {
                  "type": 135
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "def": {
                "tuple": [
                  10,
                  10
                ]
              }
            }
          },
          {
            "id": 136,
            "type": {
              "def": {
                "sequence": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 138,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 139
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 139,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 139,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 139,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 140,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 140,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 140,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 142,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 131,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 131,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 145,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 146
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 146
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 146,
            "type": {
              "def": {
                "sequence": {
                  "type": 147
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "def": {
                "tuple": [
                  110,
                  4
                ]
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 150
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 152,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "def": {
                "tuple": [
                  151,
                  8
                ]
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "sp_consensus_babe",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "def": {
                "sequence": {
                  "type": 150
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "NextConfigDescriptor"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": "c",
                          "type": 155,
                          "typeName": "(u64, u64)"
                        },
                        {
                          "name": "allowed_slots",
                          "type": 156,
                          "typeName": "AllowedSlots"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "def": {
                "tuple": [
                  8,
                  8
                ]
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "sp_consensus_babe",
                "AllowedSlots"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PrimarySlots",
                      "index": 0
                    },
                    {
                      "name": "PrimaryAndSecondaryPlainSlots",
                      "index": 1
                    },
                    {
                      "name": "PrimaryAndSecondaryVRFSlots",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 158,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "def": {
                "sequence": {
                  "type": 1
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "sp_consensus_babe",
                "BabeEpochConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "c",
                      "type": 155,
                      "typeName": "(u64, u64)"
                    },
                    {
                      "name": "allowed_slots",
                      "type": 156,
                      "typeName": "AllowedSlots"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 162,
                          "typeName": "Box<EquivocationProof<T::Header>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 165,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 162,
                          "typeName": "Box<EquivocationProof<T::Header>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 165,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported.",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "plan_config_change",
                      "fields": [
                        {
                          "name": "config",
                          "type": 154,
                          "typeName": "NextConfigDescriptor"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                        "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                        "Multiple calls to this method will replace any existing planned config change that had",
                        "not been enacted yet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "sp_consensus_slots",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 163
                },
                {
                  "name": "Id",
                  "type": 151
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 151,
                      "typeName": "Id"
                    },
                    {
                      "name": "slot",
                      "type": 153,
                      "typeName": "Slot"
                    },
                    {
                      "name": "first_header",
                      "type": 163,
                      "typeName": "Header"
                    },
                    {
                      "name": "second_header",
                      "type": 163,
                      "typeName": "Header"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 164
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 95,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest<Hash::Output>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "sp_session",
                "MembershipProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "trie_nodes",
                      "type": 136,
                      "typeName": "Vec<Vec<u8>>"
                    },
                    {
                      "name": "validator_count",
                      "type": 4,
                      "typeName": "ValidatorCount"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 0,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 1,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 2,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 97,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 168,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6,
                  66
                ]
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign an previously unassigned index.",
                        "",
                        "Payment: `Deposit` is reserved from the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be claimed. This must not be in use.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign an index already owned by the sender to another account. The balance reservation",
                        "is effectively transferred to the new account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be re-assigned. This must be owned by the sender.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One transfer operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (recipient)",
                        "   - Writes: Indices Accounts, System Account (recipient)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "free",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Free up an index owned by the sender.",
                        "",
                        "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                        "",
                        "- `index`: the index to be freed. This must be owned by the sender.",
                        "",
                        "Emits `IndexFreed` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        },
                        {
                          "name": "freeze",
                          "type": 66,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force an index to an account. This doesn't require a deposit. If the index is already",
                        "held, then any deposit is reimbursed to its current owner.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `index`: the index to be (re-)assigned.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (original owner)",
                        "   - Writes: Indices Accounts, System Account (original owner)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Freeze an index so it will always point to the sender account. This consumes the",
                        "deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                        "non-frozen account `index`.",
                        "",
                        "- `index`: the index to be frozen in place.",
                        "",
                        "Emits `IndexFrozen` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one slash operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAssigned",
                      "index": 0,
                      "docs": [
                        "The index was not already assigned."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 1,
                      "docs": [
                        "The index is assigned to another account."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 2,
                      "docs": [
                        "The index was not available."
                      ]
                    },
                    {
                      "name": "NotTransfer",
                      "index": 3,
                      "docs": [
                        "The source and destination accounts are identical."
                      ]
                    },
                    {
                      "name": "Permanent",
                      "index": 4,
                      "docs": [
                        "The index is permanent and may not be freed/changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 172
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 174,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 110,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 173,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "def": {
                "sequence": {
                  "type": 172
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 176
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 177,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 110
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 110,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "def": {
                "sequence": {
                  "type": 176
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the `TransferFee`.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                        "- DB Weight: 1 Read and 1 Write to destination account",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "new_free",
                          "type": 46,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 46,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also decrease the total issuance of the system (`TotalIssuance`).",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments.",
                        "- Contains a limited number of reads and writes.",
                        "---------------------",
                        "- Base Weight:",
                        "    - Creating: 27.56 µs",
                        "    - Killing: 35.11 µs",
                        "- DB Weight: 1 Read, 1 Write to `who`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer",
                        "# <weight>",
                        "- Cheaper than transfer because account cannot be killed.",
                        "- Base Weight: 51.4 µs",
                        "- DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                        "#</weight>"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "keep_alive",
                          "type": 66,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 57
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 181,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "def": {
                "compact": {
                  "type": 57
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "def": {
                "sequence": {
                  "type": 186
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "WeightToFeeCoefficient"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "coeff_frac",
                      "type": 133,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "negative",
                      "type": 66,
                      "typeName": "bool"
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "def": {
                "sequence": {
                  "type": 188
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        },
                        {
                          "type": 189,
                          "typeName": "Option<Author>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 191,
                          "typeName": "Vec<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 191,
            "type": {
              "def": {
                "sequence": {
                  "type": 163
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "pallet_staking",
                "StakingLedger"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "total",
                      "type": 46,
                      "typeName": "Balance"
                    },
                    {
                      "name": "active",
                      "type": 46,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unlocking",
                      "type": 195,
                      "typeName": "Vec<UnlockChunk<Balance>>"
                    },
                    {
                      "name": "claimed_rewards",
                      "type": 197,
                      "typeName": "Vec<EraIndex>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "def": {
                "sequence": {
                  "type": 196
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "pallet_staking",
                "UnlockChunk"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 46,
                      "typeName": "Balance"
                    },
                    {
                      "name": "era",
                      "type": 95,
                      "typeName": "EraIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "pallet_staking",
                "RewardDestination"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "index": 0
                    },
                    {
                      "name": "Stash",
                      "index": 1
                    },
                    {
                      "name": "Controller",
                      "index": 2
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "None",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "pallet_staking",
                "ValidatorPrefs"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "commission",
                      "type": 200,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "blocked",
                      "type": 66,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "def": {
                "compact": {
                  "type": 133
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "pallet_staking",
                "Nominations"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "targets",
                      "type": 193,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "submitted_in",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "suppressed",
                      "type": 66,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "pallet_staking",
                "ActiveEraInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "start",
                      "type": 140,
                      "typeName": "Option<u64>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0
                ]
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "pallet_staking",
                "EraRewardPoints"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 4,
                      "typeName": "RewardPoint"
                    },
                    {
                      "name": "individual",
                      "type": 205,
                      "typeName": "BTreeMap<AccountId, RewardPoint>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 206
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "def": {
                "sequence": {
                  "type": 207
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "def": {
                "tuple": [
                  0,
                  4
                ]
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "pallet_staking",
                "Forcing"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotForcing",
                      "index": 0
                    },
                    {
                      "name": "ForceNew",
                      "index": 1
                    },
                    {
                      "name": "ForceNone",
                      "index": 2
                    },
                    {
                      "name": "ForceAlways",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "def": {
                "sequence": {
                  "type": 210
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "pallet_staking",
                "UnappliedSlash"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validator",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "own",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "others",
                      "type": 211,
                      "typeName": "Vec<(AccountId, Balance)>"
                    },
                    {
                      "name": "reporters",
                      "type": 193,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "payout",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "def": {
                "sequence": {
                  "type": 212
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 213,
            "type": {
              "def": {
                "tuple": [
                  133,
                  6
                ]
              }
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "pallet_staking",
                "slashing",
                "SlashingSpans"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "span_index",
                      "type": 4,
                      "typeName": "SpanIndex"
                    },
                    {
                      "name": "last_start",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "last_nonzero_slash",
                      "type": 4,
                      "typeName": "EraIndex"
                    },
                    {
                      "name": "prior",
                      "type": 197,
                      "typeName": "Vec<EraIndex>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "pallet_staking",
                "slashing",
                "SpanRecord"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "slashed",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "paid_out",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "def": {
                "sequence": {
                  "type": 217
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "def": {
                "tuple": [
                  4,
                  66
                ]
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "pallet_staking",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    },
                    {
                      "name": "V3_0_0",
                      "index": 2
                    },
                    {
                      "name": "V4_0_0",
                      "index": 3
                    },
                    {
                      "name": "V5_0_0",
                      "index": 4
                    },
                    {
                      "name": "V6_0_0",
                      "index": 5
                    },
                    {
                      "name": "V7_0_0",
                      "index": 6
                    },
                    {
                      "name": "V8_0_0",
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "payee",
                          "type": 198,
                          "typeName": "RewardDestination<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                        "be the account that controls it.",
                        "",
                        "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash account.",
                        "",
                        "Emits `Bonded`.",
                        "# <weight>",
                        "- Independent of the arguments. Moderate complexity.",
                        "- O(1).",
                        "- Three extra DB entries.",
                        "",
                        "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                        "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                        "------------------",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "bond_extra",
                      "fields": [
                        {
                          "name": "max_additional",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                        "for staking.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Use this if there are additional funds in your stash account that you wish to bond.",
                        "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                        "any limitation on the amount that can be added.",
                        "",
                        "Emits `Bonded`.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                        "period ends. If this leaves an amount actively bonded less than",
                        "T::Currency::minimum_balance(), then it is increased to the full amount.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                        "the funds out of management ready for transfer.",
                        "",
                        "No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                        "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                        "to be called first to remove some of the chunks (if possible).",
                        "",
                        "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                        "they should call `chill` first in order to free up their bonded funds.",
                        "",
                        "Emits `Unbonded`.",
                        "",
                        "See also [`Call::withdraw_unbonded`]."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove any unlocked chunks from the `unlocking` queue from our management.",
                        "",
                        "This essentially frees up that balance to be used by the stash account to do",
                        "whatever it wants.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller.",
                        "",
                        "Emits `Withdrawn`.",
                        "",
                        "See also [`Call::unbond`].",
                        "",
                        "# <weight>",
                        "Complexity O(S) where S is the number of slashing spans to remove",
                        "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "validate",
                      "fields": [
                        {
                          "name": "prefs",
                          "type": 199,
                          "typeName": "ValidatorPrefs"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Declare the desire to validate for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "targets",
                          "type": 221,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Declare the desire to nominate `targets` for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is proportional to the size of `targets` (N)",
                        "which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                        "- Both the reads and writes follow a similar pattern.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "chill",
                      "index": 6,
                      "docs": [
                        "Declare no desire to either validate or nominate.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains one read.",
                        "- Writes are limited to the `origin` account key.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_payee",
                      "fields": [
                        {
                          "name": "payee",
                          "type": 198,
                          "typeName": "RewardDestination<T::AccountId>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "(Re-)set the payment target for a controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "---------",
                        "- Weight: O(1)",
                        "- DB Weight:",
                        "    - Read: Ledger",
                        "    - Write: Payee",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_controller",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "(Re-)set the controller of a stash.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "Weight: O(1)",
                        "DB Weight:",
                        "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                        "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_validator_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Sets the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "Write: Validator Count",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "increase_validator_count",
                      "fields": [
                        {
                          "name": "additional",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Increments the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "scale_validator_count",
                      "fields": [
                        {
                          "name": "factor",
                          "type": 219,
                          "typeName": "Percent"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Scale up the ideal number of validators by a factor.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_no_eras",
                      "index": 12,
                      "docs": [
                        "Force there to be no new eras indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "Thus the election process may be ongoing when this is called. In this case the",
                        "election will continue until the next era is triggered.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era",
                      "index": 13,
                      "docs": [
                        "Force there to be a new era at the end of the next session. After this, it will be",
                        "reset to normal (non-forced) behaviour.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 193,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the validators who cannot be slashed (if any).",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "- O(V)",
                        "- Write: Invulnerables",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_unstake",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Force a current staker to become completely unstaked, immediately.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "O(S) where S is the number of slashing spans to be removed",
                        "Reads: Bonded, Slashing Spans, Account, Locks",
                        "Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
                        "Account, Locks Writes Each: SpanSlash * S",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era_always",
                      "index": 16,
                      "docs": [
                        "Force there to be a new era at the end of sessions indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_deferred_slash",
                      "fields": [
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex"
                        },
                        {
                          "name": "slash_indices",
                          "type": 197,
                          "typeName": "Vec<u32>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Cancel enactment of a deferred slash.",
                        "",
                        "Can be called by the `T::SlashCancelOrigin`.",
                        "",
                        "Parameters: era and indices of the slashes for that era to kill.",
                        "",
                        "# <weight>",
                        "Complexity: O(U + S)",
                        "with U unapplied slashes weighted with U=1000",
                        "and S is the number of slash indices to be canceled.",
                        "- Read: Unapplied Slashes",
                        "- Write: Unapplied Slashes",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "payout_stakers",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Pay out all the stakers behind a single validator for a single era.",
                        "",
                        "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                        "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                        "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                        "",
                        "The origin of this call must be _Signed_. Any account can call this function, even if",
                        "it is not one of the stakers.",
                        "",
                        "# <weight>",
                        "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                        "- Contains a limited number of reads and writes.",
                        "-----------",
                        "N is the Number of payouts for the validator (including the validator)",
                        "Weight:",
                        "- Reward Destination Staked: O(N)",
                        "- Reward Destination Controller (Creating): O(N)",
                        "",
                        "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                        "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Rebond a portion of the stash scheduled to be unlocked.",
                        "",
                        "The dispatch origin must be signed by the controller.",
                        "",
                        "# <weight>",
                        "- Time complexity: O(L), where L is unlocking chunks",
                        "- Bounded by `MAX_UNLOCKING_CHUNKS`.",
                        "- Storage changes: Can't increase storage, only decrease it.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_history_depth",
                      "fields": [
                        {
                          "name": "new_history_depth",
                          "type": 95,
                          "typeName": "EraIndex"
                        },
                        {
                          "name": "era_items_deleted",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Set `HistoryDepth` value. This function will delete any history information",
                        "when `HistoryDepth` is reduced.",
                        "",
                        "Parameters:",
                        "- `new_history_depth`: The new history depth you would like to set.",
                        "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
                        "  should report all the storage items that will be deleted by clearing old era history.",
                        "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
                        "  accurate number.",
                        "",
                        "Origin must be root.",
                        "",
                        "# <weight>",
                        "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
                        "- Weight: O(E)",
                        "- DB Weight:",
                        "    - Reads: Current Era, History Depth",
                        "    - Writes: History Depth",
                        "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                        "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
                        "      ErasStartSessionIndex",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reap_stash",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove all data structure concerning a staker/stash once its balance is at the minimum.",
                        "This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                        "and the target `stash` must have no funds left beyond the ED.",
                        "",
                        "This can be called from any origin.",
                        "",
                        "- `stash`: The stash account to reap. Its balance must be zero.",
                        "",
                        "# <weight>",
                        "Complexity: O(S) where S is the number of slashing spans on the account.",
                        "DB Weight:",
                        "- Reads: Stash Account, Bonded, Slashing Spans, Locks",
                        "- Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
                        "  Stash Account, Locks",
                        "- Writes Each: SpanSlash * S",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kick",
                      "fields": [
                        {
                          "name": "who",
                          "type": 221,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Remove the given nominations from the calling validator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "- `who`: A list of nominator stash accounts who are nominating this validator which",
                        "  should no longer be nominating this validator.",
                        "",
                        "Note: Making this call only makes sense if you first set the validator preferences to",
                        "block any further nominations."
                      ]
                    },
                    {
                      "name": "set_staking_limits",
                      "fields": [
                        {
                          "name": "min_nominator_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "min_validator_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "max_nominator_count",
                          "type": 222,
                          "typeName": "Option<u32>"
                        },
                        {
                          "name": "max_validator_count",
                          "type": 222,
                          "typeName": "Option<u32>"
                        },
                        {
                          "name": "threshold",
                          "type": 223,
                          "typeName": "Option<Percent>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Update the various staking limits this pallet.",
                        "",
                        "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                        "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                        "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `max_validator_count`: The max number of users who can be a validator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "",
                        "Origin must be Root to call this function.",
                        "",
                        "NOTE: Existing nominators and validators will not be affected by this update.",
                        "to kick people under the new limits, `chill_other` should be called."
                      ]
                    },
                    {
                      "name": "chill_other",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Declare a `controller` to stop participating as either a validator or nominator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                        "",
                        "If the caller is the same as the controller being targeted, then no further checks are",
                        "enforced, and this function behaves just like `chill`.",
                        "",
                        "If the caller is different than the controller being targeted, the following conditions",
                        "must be met:",
                        "* A `ChillThreshold` must be set and checked which defines how close to the max",
                        "  nominators or validators we must reach before users can start chilling one-another.",
                        "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                        "  how close we are to the threshold.",
                        "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                        "  if this is a person that should be chilled because they have not met the threshold",
                        "  bond required.",
                        "",
                        "This can be helpful if bond requirements are updated, and we need to remove old users",
                        "who do not satisfy these requirements."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 221,
            "type": {
              "def": {
                "sequence": {
                  "type": 180
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 219
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 219
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotController",
                      "index": 0,
                      "docs": [
                        "Not a controller account."
                      ]
                    },
                    {
                      "name": "NotStash",
                      "index": 1,
                      "docs": [
                        "Not a stash account."
                      ]
                    },
                    {
                      "name": "AlreadyBonded",
                      "index": 2,
                      "docs": [
                        "Stash is already bonded."
                      ]
                    },
                    {
                      "name": "AlreadyPaired",
                      "index": 3,
                      "docs": [
                        "Controller is already paired."
                      ]
                    },
                    {
                      "name": "EmptyTargets",
                      "index": 4,
                      "docs": [
                        "Targets cannot be empty."
                      ]
                    },
                    {
                      "name": "DuplicateIndex",
                      "index": 5,
                      "docs": [
                        "Duplicate index."
                      ]
                    },
                    {
                      "name": "InvalidSlashIndex",
                      "index": 6,
                      "docs": [
                        "Slash record index out of bounds."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "index": 7,
                      "docs": [
                        "Can not bond with value less than minimum required."
                      ]
                    },
                    {
                      "name": "NoMoreChunks",
                      "index": 8,
                      "docs": [
                        "Can not schedule more unlock chunks."
                      ]
                    },
                    {
                      "name": "NoUnlockChunk",
                      "index": 9,
                      "docs": [
                        "Can not rebond without unlocking chunks."
                      ]
                    },
                    {
                      "name": "FundedTarget",
                      "index": 10,
                      "docs": [
                        "Attempting to target a stash that still has funds."
                      ]
                    },
                    {
                      "name": "InvalidEraToReward",
                      "index": 11,
                      "docs": [
                        "Invalid era to reward."
                      ]
                    },
                    {
                      "name": "InvalidNumberOfNominations",
                      "index": 12,
                      "docs": [
                        "Invalid number of nominations."
                      ]
                    },
                    {
                      "name": "NotSortedAndUnique",
                      "index": 13,
                      "docs": [
                        "Items are not sorted and unique."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 14,
                      "docs": [
                        "Rewards for this era have already been claimed for this validator."
                      ]
                    },
                    {
                      "name": "IncorrectHistoryDepth",
                      "index": 15,
                      "docs": [
                        "Incorrect previous history depth input provided."
                      ]
                    },
                    {
                      "name": "IncorrectSlashingSpans",
                      "index": 16,
                      "docs": [
                        "Incorrect number of slashing spans provided."
                      ]
                    },
                    {
                      "name": "BadState",
                      "index": 17,
                      "docs": [
                        "Internal state has become somehow corrupted and the operation cannot continue."
                      ]
                    },
                    {
                      "name": "TooManyTargets",
                      "index": 18,
                      "docs": [
                        "Too many nomination targets supplied."
                      ]
                    },
                    {
                      "name": "BadTarget",
                      "index": 19,
                      "docs": [
                        "A nomination target was supplied that was blocked or otherwise not a validator."
                      ]
                    },
                    {
                      "name": "CannotChillOther",
                      "index": 20,
                      "docs": [
                        "The user has enough bond and thus cannot be chilled forcefully by an external person."
                      ]
                    },
                    {
                      "name": "TooManyNominators",
                      "index": 21,
                      "docs": [
                        "There are too many nominators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "TooManyValidators",
                      "index": 22,
                      "docs": [
                        "There are too many validators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "sp_staking",
                "offence",
                "OffenceDetails"
              ],
              "params": [
                {
                  "name": "Reporter",
                  "type": 0
                },
                {
                  "name": "Offender",
                  "type": 44
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 44,
                      "typeName": "Offender"
                    },
                    {
                      "name": "reporters",
                      "type": 193,
                      "typeName": "Vec<Reporter>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "def": {
                "tuple": [
                  33,
                  10
                ]
              }
            }
          },
          {
            "id": 227,
            "type": {
              "def": {
                "sequence": {
                  "type": 228
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "def": {
                "tuple": [
                  0,
                  229
                ]
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "westend_runtime",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "grandpa",
                      "type": 38,
                      "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "babe",
                      "type": 151,
                      "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "im_online",
                      "type": 41,
                      "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "para_validator",
                      "type": 230,
                      "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "para_assignment",
                      "type": 231,
                      "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "authority_discovery",
                      "type": 232,
                      "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "polkadot_primitives",
                "v0",
                "validator_app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "assignment_app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "sp_authority_discovery",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "def": {
                "tuple": [
                  234,
                  10
                ]
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 229,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "index": 0
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Paused",
                      "index": 2
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "next_authorities",
                      "type": 239,
                      "typeName": "BoundedAuthorityList<Limit>"
                    },
                    {
                      "name": "forced",
                      "type": 222,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 36,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 241,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 165,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 241,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 165,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has",
                        "stalled. This will trigger a forced authority set change at the beginning",
                        "of the next session, to be enacted `delay` blocks after that. The delay",
                        "should be high enough to safely assume that the block signalling the",
                        "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                        "will start the new authority set using the given finalized block as base.",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId"
                    },
                    {
                      "name": "equivocation",
                      "type": 242,
                      "typeName": "Equivocation<H, N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "type": 243,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "type": 248,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 38
                },
                {
                  "name": "V",
                  "type": 244
                },
                {
                  "name": "S",
                  "type": 245
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 38,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 247,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 247,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 246,
                      "typeName": "ed25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 76,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "def": {
                "tuple": [
                  244,
                  245
                ]
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 38
                },
                {
                  "name": "V",
                  "type": 249
                },
                {
                  "name": "S",
                  "type": 245
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 38,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 250,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 250,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "def": {
                "tuple": [
                  249,
                  245
                ]
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 41
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 253,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "def": {
                "sequence": {
                  "type": 41
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 255
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 95
                    },
                    {
                      "type": 255,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "pallet_im_online",
                "BoundedOpaqueNetworkState"
              ],
              "params": [
                {
                  "name": "PeerIdEncodingLimit",
                  "type": null
                },
                {
                  "name": "MultiAddrEncodingLimit",
                  "type": null
                },
                {
                  "name": "AddressesLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 256,
                      "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>"
                    },
                    {
                      "name": "external_addresses",
                      "type": 257,
                      "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 256
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 258,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "def": {
                "sequence": {
                  "type": 256
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "heartbeat",
                      "fields": [
                        {
                          "name": "heartbeat",
                          "type": 260,
                          "typeName": "Heartbeat<T::BlockNumber>"
                        },
                        {
                          "name": "signature",
                          "type": 265,
                          "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "# <weight>",
                        "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
                        "  length of `heartbeat.network_state.external_address`",
                        "  - `O(K)`: decoding of length `K`",
                        "  - `O(E)`: decoding/encoding of length `E`",
                        "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                        "  `ReceivedHeartbeats`",
                        "- DbWrites: `ReceivedHeartbeats`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "pallet_im_online",
                "Heartbeat"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "network_state",
                      "type": 261,
                      "typeName": "OpaqueNetworkState"
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "AuthIndex"
                    },
                    {
                      "name": "validators_len",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueNetworkState"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 262,
                      "typeName": "OpaquePeerId"
                    },
                    {
                      "name": "external_addresses",
                      "type": 263,
                      "typeName": "Vec<OpaqueMultiaddr>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "sp_core",
                "OpaquePeerId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "def": {
                "sequence": {
                  "type": 264
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueMultiaddr"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 75,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidKey",
                      "index": 0,
                      "docs": [
                        "Non existent public key."
                      ]
                    },
                    {
                      "name": "DuplicatedHeartbeat",
                      "index": 1,
                      "docs": [
                        "Duplicated heartbeat."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 268,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 61,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 268,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 268,
            "type": {
              "def": {
                "sequence": {
                  "type": 269
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "westend_runtime",
                "Call"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Babe",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 167,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 179,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "type": 190,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 220,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 235,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 240,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 267,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 270,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "type": 310,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 311,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 313,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 315,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 316,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 318,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "type": 320,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "BagsList",
                      "fields": [
                        {
                          "type": 379,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BagsList, Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Configuration",
                      "fields": [
                        {
                          "type": 380,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "ParasShared",
                      "fields": [
                        {
                          "type": 381,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "ParaInclusion",
                      "fields": [
                        {
                          "type": 382,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ParaInherent",
                      "fields": [
                        {
                          "type": 383,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>"
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Paras",
                      "fields": [
                        {
                          "type": 410,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>"
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Initializer",
                      "fields": [
                        {
                          "type": 411,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>"
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Dmp",
                      "fields": [
                        {
                          "type": 412,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dmp, Runtime>"
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Ump",
                      "fields": [
                        {
                          "type": 413,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ump, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Hrmp",
                      "fields": [
                        {
                          "type": 414,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Registrar",
                      "fields": [
                        {
                          "type": 415,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Slots",
                      "fields": [
                        {
                          "type": 416,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "ParasSudoWrapper",
                      "fields": [
                        {
                          "type": 417,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSudoWrapper, Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Auctions",
                      "fields": [
                        {
                          "type": 430,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Crowdloan",
                      "fields": [
                        {
                          "type": 432,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>"
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "XcmPallet",
                      "fields": [
                        {
                          "type": 441,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>"
                        }
                      ],
                      "index": 99
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 271,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 305,
                          "typeName": "Vec<(T::AccountId, Data)>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 95,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "max_fee",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 95,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fee",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 95,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 95,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fields",
                          "type": 307,
                          "typeName": "IdentityFields"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 95,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "target",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "judgement",
                          "type": 309,
                          "typeName": "Judgement<BalanceOf<T>>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "data",
                          "type": 274,
                          "typeName": "Data"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "data",
                          "type": 274,
                          "typeName": "Data"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 272,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>"
                    },
                    {
                      "name": "display",
                      "type": 274,
                      "typeName": "Data"
                    },
                    {
                      "name": "legal",
                      "type": 274,
                      "typeName": "Data"
                    },
                    {
                      "name": "web",
                      "type": 274,
                      "typeName": "Data"
                    },
                    {
                      "name": "riot",
                      "type": 274,
                      "typeName": "Data"
                    },
                    {
                      "name": "email",
                      "type": 274,
                      "typeName": "Data"
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 304,
                      "typeName": "Option<[u8; 20]>"
                    },
                    {
                      "name": "image",
                      "type": 274,
                      "typeName": "Data"
                    },
                    {
                      "name": "twitter",
                      "type": 274,
                      "typeName": "Data"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 273
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 303,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 273,
            "type": {
              "def": {
                "tuple": [
                  274,
                  274
                ]
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "type": 275
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "type": 276
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "type": 277
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "type": 278
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "type": 14
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "type": 279
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "type": 280
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "type": 281
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "type": 110
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "type": 282
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "type": 283
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "type": 284
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "type": 285
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "type": 286
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "type": 287
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "type": 288
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "type": 33
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "type": 289
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "type": 290
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "type": 291
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "type": 98
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "type": 292
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "type": 293
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "type": 294
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "type": 295
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "type": 296
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "type": 297
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "type": 298
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "type": 299
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "type": 300
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "type": 301
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "type": 302
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 37
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 281,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 290,
            "type": {
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 292,
            "type": {
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 294,
            "type": {
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 295,
            "type": {
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 296,
            "type": {
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 299,
            "type": {
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 302,
            "type": {
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "def": {
                "sequence": {
                  "type": 273
                }
              }
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 98
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 98
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "def": {
                "sequence": {
                  "type": 306
                }
              }
            }
          },
          {
            "id": 306,
            "type": {
              "def": {
                "tuple": [
                  0,
                  274
                ]
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 308
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 8,
                      "typeName": "IdentityField"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "index": 1
                    },
                    {
                      "name": "Legal",
                      "index": 2
                    },
                    {
                      "name": "Web",
                      "index": 4
                    },
                    {
                      "name": "Riot",
                      "index": 8
                    },
                    {
                      "name": "Email",
                      "index": 16
                    },
                    {
                      "name": "PgpFingerprint",
                      "index": 32
                    },
                    {
                      "name": "Image",
                      "index": 64
                    },
                    {
                      "name": "Twitter",
                      "index": 128
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reasonable",
                      "index": 2
                    },
                    {
                      "name": "KnownGood",
                      "index": 3
                    },
                    {
                      "name": "OutOfDate",
                      "index": 4
                    },
                    {
                      "name": "LowQuality",
                      "index": 5
                    },
                    {
                      "name": "Erroneous",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a call through a recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you want to make a call on-behalf-of.",
                        "- `call`: The call you want to make with the recovered account.",
                        "",
                        "# <weight>",
                        "- The weight of the `call` + 10,000.",
                        "- One storage lookup to check account is recovered by `who`. O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_recovered",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow ROOT to bypass the recovery process and set an a rescuer account",
                        "for a lost account directly.",
                        "",
                        "The dispatch origin for this call must be _ROOT_.",
                        "",
                        "Parameters:",
                        "- `lost`: The \"lost account\" to be recovered.",
                        "- `rescuer`: The \"rescuer account\" which can call as the lost account.",
                        "",
                        "# <weight>",
                        "- One storage write O(1)",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "create_recovery",
                      "fields": [
                        {
                          "name": "friends",
                          "type": 193,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "threshold",
                          "type": 61,
                          "typeName": "u16"
                        },
                        {
                          "name": "delay_period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a recovery configuration for your account. This makes your account recoverable.",
                        "",
                        "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                        "will be reserved for storing the recovery configuration. This deposit is returned",
                        "in full when the user calls `remove_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                        "  ordered and contain no duplicate values.",
                        "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                        "  account can be recovered. Should be less than or equal to the length of the list of",
                        "  friends.",
                        "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                        "  needs to pass before the account can be recovered.",
                        "",
                        "# <weight>",
                        "- Key: F (len of friends)",
                        "- One storage read to check that account is not already recoverable. O(1).",
                        "- A check that the friends list is sorted and unique. O(F)",
                        "- One currency reserve operation. O(X)",
                        "- One storage write. O(1). Codec O(F).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "initiate_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Initiate the process for recovering a recoverable account.",
                        "",
                        "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                        "recovery process. This deposit will always be repatriated to the account",
                        "trying to be recovered. See `close_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to recover. This account needs to be",
                        "  recoverable (i.e. have a recovery configuration).",
                        "",
                        "# <weight>",
                        "- One storage read to check that account is recoverable. O(F)",
                        "- One storage read to check that this recovery process hasn't already started. O(1)",
                        "- One currency reserve operation. O(X)",
                        "- One storage read to get the current block number. O(1)",
                        "- One storage write. O(1).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vouch_recovery",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                        "process for that account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                        "for the recoverable account.",
                        "",
                        "Parameters:",
                        "- `lost`: The lost account that you want to recover.",
                        "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                        "",
                        "The combination of these two parameters must point to an active recovery",
                        "process.",
                        "",
                        "# <weight>",
                        "Key: F (len of friends in config), V (len of vouching friends)",
                        "- One storage read to get the recovery configuration. O(1), Codec O(F)",
                        "- One storage read to get the active recovery process. O(1), Codec O(V)",
                        "- One binary search to confirm caller is a friend. O(logF)",
                        "- One binary search to confirm caller has not already vouched. O(logV)",
                        "- One storage write. O(1), Codec O(V).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + logF + V + logV)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Allow a successful rescuer to claim their recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                        "who has successfully completed the account recovery process: collected",
                        "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to claim has been successfully recovered by",
                        "  you.",
                        "",
                        "# <weight>",
                        "Key: F (len of friends in config), V (len of vouching friends)",
                        "- One storage read to get the recovery configuration. O(1), Codec O(F)",
                        "- One storage read to get the active recovery process. O(1), Codec O(V)",
                        "- One storage read to get the current block number. O(1)",
                        "- One storage write. O(1), Codec O(V).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + V)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_recovery",
                      "fields": [
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "As the controller of a recoverable account, close an active recovery",
                        "process for your account.",
                        "",
                        "Payment: By calling this function, the recoverable account will receive",
                        "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account with an active recovery process for it.",
                        "",
                        "Parameters:",
                        "- `rescuer`: The account trying to rescue this recoverable account.",
                        "",
                        "# <weight>",
                        "Key: V (len of vouching friends)",
                        "- One storage read/remove to get the active recovery process. O(1), Codec O(V)",
                        "- One balance call to repatriate reserved. O(X)",
                        "- One event.",
                        "",
                        "Total Complexity: O(V + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_recovery",
                      "index": 7,
                      "docs": [
                        "Remove the recovery process for your account. Recovered accounts are still accessible.",
                        "",
                        "NOTE: The user must make sure to call `close_recovery` on all active",
                        "recovery attempts before calling this function else it will fail.",
                        "",
                        "Payment: By calling this function the recoverable account will unreserve",
                        "their recovery configuration deposit.",
                        "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account (i.e. has a recovery configuration).",
                        "",
                        "# <weight>",
                        "Key: F (len of friends)",
                        "- One storage read to get the prefix iterator for active recoveries. O(1)",
                        "- One storage read/remove to get the recovery configuration. O(1), Codec O(F)",
                        "- One balance call to unreserved. O(X)",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Cancel the ability to use `as_recovered` for `account`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you are able to call on-behalf-of.",
                        "",
                        "# <weight>",
                        "- One storage mutation to check account is recovered by `who`. O(1)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 2 Reads, 2 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 312,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "target",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 312,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 4 Reads, 4 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "schedule2_index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 314,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 22.29 + .126 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda",
                        "    - Write: Agenda",
                        "- Will use base weight of 25 which should be good for up to 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 22.15 + 2.869 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda",
                        "    - Write: Agenda, Lookup",
                        "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 314,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 29.6 + .159 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda, Lookup",
                        "    - Write: Agenda, Lookup",
                        "- Will use base weight of 35 which should be good for more than 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task.",
                        "",
                        "# <weight>",
                        "- S = Number of already scheduled calls",
                        "- Base Weight: 24.91 + 2.907 * S µs",
                        "- DB Weight:",
                        "    - Read: Agenda, Lookup",
                        "    - Write: Agenda, Lookup",
                        "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 314,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 314,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 54
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 54
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 180,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 317,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 61,
                          "typeName": "u16"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "index",
                          "type": 61,
                          "typeName": "u16"
                        },
                        {
                          "name": "height",
                          "type": 95,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "ext_index",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 317,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 60
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 60
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 193,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "call",
                          "type": 269,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "# <weight>",
                        "O(Z + C) where Z is the length of the call and C its execution weight.",
                        "-------------------------------",
                        "- DB Weight: None",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 61,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 193,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 319,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call",
                          "type": 10,
                          "typeName": "OpaqueCall"
                        },
                        {
                          "name": "store_call",
                          "type": 66,
                          "typeName": "bool"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "# <weight>",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "-------------------------------",
                        "- DB Weight:",
                        "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 61,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 193,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 319,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account]",
                        "    - Write: Multisig Storage, [Caller Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 61,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 193,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "timepoint",
                          "type": 63,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 63
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 63
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_unsigned",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 321,
                          "typeName": "Box<RawSolution<SolutionOf<T>>>"
                        },
                        {
                          "name": "witness",
                          "type": 374,
                          "typeName": "SolutionOrSnapshotSize"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Submit a solution for the unsigned phase.",
                        "",
                        "The dispatch origin fo this call must be __none__.",
                        "",
                        "This submission is checked on the fly. Moreover, this unsigned solution is only",
                        "validated when submitted to the pool from the **local** node. Effectively, this means",
                        "that only active validators can submit this transaction when authoring a block (similar",
                        "to an inherent).",
                        "",
                        "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                        "panic if the solution submitted by the validator is invalid in any way, effectively",
                        "putting their authoring reward at risk.",
                        "",
                        "No deposit or reward is associated with this submission."
                      ]
                    },
                    {
                      "name": "set_minimum_untrusted_score",
                      "fields": [
                        {
                          "name": "maybe_next_score",
                          "type": 375,
                          "typeName": "Option<ElectionScore>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set a new value for `MinimumUntrustedScore`.",
                        "",
                        "Dispatch origin must be aligned with `T::ForceOrigin`.",
                        "",
                        "This check can be turned off by setting the value to `None`."
                      ]
                    },
                    {
                      "name": "set_emergency_election_result",
                      "fields": [
                        {
                          "name": "supports",
                          "type": 376,
                          "typeName": "Supports<T::AccountId>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                        "call to `ElectionProvider::elect`.",
                        "",
                        "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                        "",
                        "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                        "feasibility check itself can in principle cause the election process to fail (due to",
                        "memory/weight constrains)."
                      ]
                    },
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 321,
                          "typeName": "Box<RawSolution<SolutionOf<T>>>"
                        },
                        {
                          "name": "num_signed_submissions",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit a solution for the signed phase.",
                        "",
                        "The dispatch origin fo this call must be __signed__.",
                        "",
                        "The solution is potentially queued, based on the claimed score and processed at the end",
                        "of the signed phase.",
                        "",
                        "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                        "might be rewarded, slashed, or get all or a part of the deposit back.",
                        "",
                        "# <weight>",
                        "Queue size must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RawSolution"
              ],
              "params": [
                {
                  "name": "S",
                  "type": 322
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "solution",
                      "type": 322,
                      "typeName": "S"
                    },
                    {
                      "name": "score",
                      "type": 373,
                      "typeName": "ElectionScore"
                    },
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "westend_runtime",
                "NposCompactSolution16"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes1",
                      "type": 323
                    },
                    {
                      "name": "votes2",
                      "type": 326
                    },
                    {
                      "name": "votes3",
                      "type": 331
                    },
                    {
                      "name": "votes4",
                      "type": 334
                    },
                    {
                      "name": "votes5",
                      "type": 337
                    },
                    {
                      "name": "votes6",
                      "type": 340
                    },
                    {
                      "name": "votes7",
                      "type": 343
                    },
                    {
                      "name": "votes8",
                      "type": 346
                    },
                    {
                      "name": "votes9",
                      "type": 349
                    },
                    {
                      "name": "votes10",
                      "type": 352
                    },
                    {
                      "name": "votes11",
                      "type": 355
                    },
                    {
                      "name": "votes12",
                      "type": 358
                    },
                    {
                      "name": "votes13",
                      "type": 361
                    },
                    {
                      "name": "votes14",
                      "type": 364
                    },
                    {
                      "name": "votes15",
                      "type": 367
                    },
                    {
                      "name": "votes16",
                      "type": 370
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "def": {
                "sequence": {
                  "type": 324
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "def": {
                "tuple": [
                  95,
                  325
                ]
              }
            }
          },
          {
            "id": 325,
            "type": {
              "def": {
                "compact": {
                  "type": 61
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "def": {
                "sequence": {
                  "type": 327
                }
              }
            }
          },
          {
            "id": 327,
            "type": {
              "def": {
                "tuple": [
                  95,
                  328,
                  325
                ]
              }
            }
          },
          {
            "id": 328,
            "type": {
              "def": {
                "tuple": [
                  325,
                  329
                ]
              }
            }
          },
          {
            "id": 329,
            "type": {
              "def": {
                "compact": {
                  "type": 330
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "PerU16"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 61,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "def": {
                "sequence": {
                  "type": 332
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "def": {
                "tuple": [
                  95,
                  333,
                  325
                ]
              }
            }
          },
          {
            "id": 333,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "def": {
                "sequence": {
                  "type": 335
                }
              }
            }
          },
          {
            "id": 335,
            "type": {
              "def": {
                "tuple": [
                  95,
                  336,
                  325
                ]
              }
            }
          },
          {
            "id": 336,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "def": {
                "sequence": {
                  "type": 338
                }
              }
            }
          },
          {
            "id": 338,
            "type": {
              "def": {
                "tuple": [
                  95,
                  339,
                  325
                ]
              }
            }
          },
          {
            "id": 339,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 340,
            "type": {
              "def": {
                "sequence": {
                  "type": 341
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "def": {
                "tuple": [
                  95,
                  342,
                  325
                ]
              }
            }
          },
          {
            "id": 342,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "def": {
                "sequence": {
                  "type": 344
                }
              }
            }
          },
          {
            "id": 344,
            "type": {
              "def": {
                "tuple": [
                  95,
                  345,
                  325
                ]
              }
            }
          },
          {
            "id": 345,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 346,
            "type": {
              "def": {
                "sequence": {
                  "type": 347
                }
              }
            }
          },
          {
            "id": 347,
            "type": {
              "def": {
                "tuple": [
                  95,
                  348,
                  325
                ]
              }
            }
          },
          {
            "id": 348,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "def": {
                "sequence": {
                  "type": 350
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "def": {
                "tuple": [
                  95,
                  351,
                  325
                ]
              }
            }
          },
          {
            "id": 351,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "def": {
                "sequence": {
                  "type": 353
                }
              }
            }
          },
          {
            "id": 353,
            "type": {
              "def": {
                "tuple": [
                  95,
                  354,
                  325
                ]
              }
            }
          },
          {
            "id": 354,
            "type": {
              "def": {
                "array": {
                  "len": 9,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "def": {
                "sequence": {
                  "type": 356
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "def": {
                "tuple": [
                  95,
                  357,
                  325
                ]
              }
            }
          },
          {
            "id": 357,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "def": {
                "sequence": {
                  "type": 359
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "def": {
                "tuple": [
                  95,
                  360,
                  325
                ]
              }
            }
          },
          {
            "id": 360,
            "type": {
              "def": {
                "array": {
                  "len": 11,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "def": {
                "sequence": {
                  "type": 362
                }
              }
            }
          },
          {
            "id": 362,
            "type": {
              "def": {
                "tuple": [
                  95,
                  363,
                  325
                ]
              }
            }
          },
          {
            "id": 363,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "def": {
                "sequence": {
                  "type": 365
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "def": {
                "tuple": [
                  95,
                  366,
                  325
                ]
              }
            }
          },
          {
            "id": 366,
            "type": {
              "def": {
                "array": {
                  "len": 13,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "def": {
                "sequence": {
                  "type": 368
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "def": {
                "tuple": [
                  95,
                  369,
                  325
                ]
              }
            }
          },
          {
            "id": 369,
            "type": {
              "def": {
                "array": {
                  "len": 14,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "def": {
                "sequence": {
                  "type": 371
                }
              }
            }
          },
          {
            "id": 371,
            "type": {
              "def": {
                "tuple": [
                  95,
                  372,
                  325
                ]
              }
            }
          },
          {
            "id": 372,
            "type": {
              "def": {
                "array": {
                  "len": 15,
                  "type": 328
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 6
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "SolutionOrSnapshotSize"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 95,
                      "typeName": "u32"
                    },
                    {
                      "name": "targets",
                      "type": 95,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 373
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 373
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "def": {
                "sequence": {
                  "type": 377
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "def": {
                "tuple": [
                  0,
                  378
                ]
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "sp_npos_elections",
                "Support"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "ExtendedBalance"
                    },
                    {
                      "name": "voters",
                      "type": 211,
                      "typeName": "Vec<(AccountId, ExtendedBalance)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_bags_list",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "rebag",
                      "fields": [
                        {
                          "name": "dislocated",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                        "changed its weight that it should properly fall into a different bag than its current",
                        "one.",
                        "",
                        "Anyone can call this function about any potentially dislocated account.",
                        "",
                        "Will never return an error; if `dislocated` does not exist or doesn't need a rebag, then",
                        "it is a noop and fees are still collected from `origin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_upgrade_frequency",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the validation upgrade frequency."
                      ]
                    },
                    {
                      "name": "set_validation_upgrade_delay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the validation upgrade delay."
                      ]
                    },
                    {
                      "name": "set_code_retention_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the acceptance period for an included candidate."
                      ]
                    },
                    {
                      "name": "set_max_code_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the max validation code size for incoming upgrades."
                      ]
                    },
                    {
                      "name": "set_max_pov_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the max POV block size for incoming upgrades."
                      ]
                    },
                    {
                      "name": "set_max_head_data_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the max head data size for paras."
                      ]
                    },
                    {
                      "name": "set_parathread_cores",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the number of parathread execution cores."
                      ]
                    },
                    {
                      "name": "set_parathread_retries",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Set the number of retries for a particular parathread."
                      ]
                    },
                    {
                      "name": "set_group_rotation_frequency",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the parachain validator-group rotation frequency"
                      ]
                    },
                    {
                      "name": "set_chain_availability_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Set the availability period for parachains."
                      ]
                    },
                    {
                      "name": "set_thread_availability_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Set the availability period for parathreads."
                      ]
                    },
                    {
                      "name": "set_scheduling_lookahead",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Set the scheduling lookahead, in expected number of blocks at peak throughput."
                      ]
                    },
                    {
                      "name": "set_max_validators_per_core",
                      "fields": [
                        {
                          "name": "new",
                          "type": 222,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Set the maximum number of validators to assign to any core."
                      ]
                    },
                    {
                      "name": "set_max_validators",
                      "fields": [
                        {
                          "name": "new",
                          "type": 222,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Set the maximum number of validators to use in parachain consensus."
                      ]
                    },
                    {
                      "name": "set_dispute_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the dispute period, in number of sessions to keep for disputes."
                      ]
                    },
                    {
                      "name": "set_dispute_post_conclusion_acceptance_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Set the dispute post conclusion acceptance period."
                      ]
                    },
                    {
                      "name": "set_dispute_max_spam_slots",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Set the maximum number of dispute spam slots."
                      ]
                    },
                    {
                      "name": "set_dispute_conclusion_by_time_out_period",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the dispute conclusion by time out period."
                      ]
                    },
                    {
                      "name": "set_no_show_slots",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Set the no show slots, in number of number of consensus slots.",
                        "Must be at least 1."
                      ]
                    },
                    {
                      "name": "set_n_delay_tranches",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Set the total number of delay tranches."
                      ]
                    },
                    {
                      "name": "set_zeroth_delay_tranche_width",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Set the zeroth delay tranche width."
                      ]
                    },
                    {
                      "name": "set_needed_approvals",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Set the number of validators needed to approve a block."
                      ]
                    },
                    {
                      "name": "set_relay_vrf_modulo_samples",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
                      ]
                    },
                    {
                      "name": "set_max_upward_queue_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Sets the maximum items that can present in a upward dispatch queue at once."
                      ]
                    },
                    {
                      "name": "set_max_upward_queue_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Sets the maximum total size of items that can present in a upward dispatch queue at once."
                      ]
                    },
                    {
                      "name": "set_max_downward_message_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Set the critical downward message size."
                      ]
                    },
                    {
                      "name": "set_ump_service_total_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Sets the soft limit for the phase of dispatching dispatchable upward messages."
                      ]
                    },
                    {
                      "name": "set_max_upward_message_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Sets the maximum size of an upward message that can be sent by a candidate."
                      ]
                    },
                    {
                      "name": "set_max_upward_message_num_per_candidate",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Sets the maximum number of messages that a candidate can contain."
                      ]
                    },
                    {
                      "name": "set_hrmp_open_request_ttl",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Sets the number of sessions after which an HRMP open channel request expires."
                      ]
                    },
                    {
                      "name": "set_hrmp_sender_deposit",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Sets the amount of funds that the sender should provide for opening an HRMP channel."
                      ]
                    },
                    {
                      "name": "set_hrmp_recipient_deposit",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
                        "channel."
                      ]
                    },
                    {
                      "name": "set_hrmp_channel_max_capacity",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Sets the maximum number of messages allowed in an HRMP channel at once."
                      ]
                    },
                    {
                      "name": "set_hrmp_channel_max_total_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parachain_inbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parathread_inbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."
                      ]
                    },
                    {
                      "name": "set_hrmp_channel_max_message_size",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "Sets the maximum size of a message that could ever be put into an HRMP channel."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parachain_outbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_parathread_outbound_channels",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."
                      ]
                    },
                    {
                      "name": "set_hrmp_max_message_num_per_candidate",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 39,
                      "docs": [
                        "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
                      ]
                    },
                    {
                      "name": "set_ump_max_individual_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 40,
                      "docs": [
                        "Sets the maximum amount of weight any individual upward message may consume."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "shared",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras_inherent",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enter",
                      "fields": [
                        {
                          "name": "data",
                          "type": 384,
                          "typeName": "ParachainsInherentData<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Enter the paras inherent. This will process bitfields and backed candidates."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "InherentData"
              ],
              "params": [
                {
                  "name": "HDR",
                  "type": 163
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bitfields",
                      "type": 385,
                      "typeName": "UncheckedSignedAvailabilityBitfields"
                    },
                    {
                      "name": "backed_candidates",
                      "type": 392,
                      "typeName": "Vec<BackedCandidate<HDR::Hash>>"
                    },
                    {
                      "name": "disputes",
                      "type": 402,
                      "typeName": "MultiDisputeStatementSet"
                    },
                    {
                      "name": "parent_header",
                      "type": 163,
                      "typeName": "HDR"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 385,
            "type": {
              "def": {
                "sequence": {
                  "type": 386
                }
              }
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "signed",
                "UncheckedSigned"
              ],
              "params": [
                {
                  "name": "Payload",
                  "type": 387
                },
                {
                  "name": "RealPayload",
                  "type": 387
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "payload",
                      "type": 387,
                      "typeName": "Payload"
                    },
                    {
                      "name": "validator_index",
                      "type": 390,
                      "typeName": "ValidatorIndex"
                    },
                    {
                      "name": "signature",
                      "type": 391,
                      "typeName": "ValidatorSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "AvailabilityBitfield"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 388,
                      "typeName": "BitVec<bitvec::order::Lsb0, u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "def": {
                "bitsequence": {
                  "bit_store_type": 2,
                  "bit_order_type": 389
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "bitvec",
                "order",
                "Lsb0"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "polkadot_primitives",
                "v0",
                "ValidatorIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "polkadot_primitives",
                "v0",
                "validator_app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 75,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "def": {
                "sequence": {
                  "type": 393
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "BackedCandidate"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "candidate",
                      "type": 394,
                      "typeName": "CommittedCandidateReceipt<H>"
                    },
                    {
                      "name": "validity_votes",
                      "type": 400,
                      "typeName": "Vec<ValidityAttestation>"
                    },
                    {
                      "name": "validator_indices",
                      "type": 388,
                      "typeName": "BitVec<bitvec::order::Lsb0, u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "CommittedCandidateReceipt"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "descriptor",
                      "type": 71,
                      "typeName": "CandidateDescriptor<H>"
                    },
                    {
                      "name": "commitments",
                      "type": 395,
                      "typeName": "CandidateCommitments"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "CandidateCommitments"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "upward_messages",
                      "type": 136,
                      "typeName": "Vec<UpwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 396,
                      "typeName": "Vec<OutboundHrmpMessage<Id>>"
                    },
                    {
                      "name": "new_validation_code",
                      "type": 398,
                      "typeName": "Option<ValidationCode>"
                    },
                    {
                      "name": "head_data",
                      "type": 78,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "processed_downward_messages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_watermark",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 396,
            "type": {
              "def": {
                "sequence": {
                  "type": 397
                }
              }
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 72
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 72,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 399
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 399
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "ValidationCode"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 400,
            "type": {
              "def": {
                "sequence": {
                  "type": 401
                }
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "polkadot_primitives",
                "v0",
                "ValidityAttestation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Implicit",
                      "fields": [
                        {
                          "type": 391,
                          "typeName": "ValidatorSignature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Explicit",
                      "fields": [
                        {
                          "type": 391,
                          "typeName": "ValidatorSignature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "def": {
                "sequence": {
                  "type": 403
                }
              }
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "DisputeStatementSet"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "candidate_hash",
                      "type": 404,
                      "typeName": "CandidateHash"
                    },
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "statements",
                      "type": 405,
                      "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "CandidateHash"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 405,
            "type": {
              "def": {
                "sequence": {
                  "type": 406
                }
              }
            }
          },
          {
            "id": 406,
            "type": {
              "def": {
                "tuple": [
                  407,
                  390,
                  391
                ]
              }
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "DisputeStatement"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Valid",
                      "fields": [
                        {
                          "type": 408,
                          "typeName": "ValidDisputeStatementKind"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "type": 409,
                          "typeName": "InvalidDisputeStatementKind"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "ValidDisputeStatementKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Explicit",
                      "index": 0
                    },
                    {
                      "name": "BackingSeconded",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "BackingValid",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ApprovalChecking",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "InvalidDisputeStatementKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Explicit",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_set_current_code",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_code",
                          "type": 399,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the storage for the parachain validation code immediately."
                      ]
                    },
                    {
                      "name": "force_set_current_head",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_head",
                          "type": 78,
                          "typeName": "HeadData"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the storage for the current parachain head data immediately."
                      ]
                    },
                    {
                      "name": "force_schedule_code_upgrade",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_code",
                          "type": 399,
                          "typeName": "ValidationCode"
                        },
                        {
                          "name": "relay_parent_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule an upgrade as if it was scheduled in the given relay parent block."
                      ]
                    },
                    {
                      "name": "force_note_new_head",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "new_head",
                          "type": 78,
                          "typeName": "HeadData"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Note a new block head for para within the context of the current block."
                      ]
                    },
                    {
                      "name": "force_queue_action",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Put a parachain directly into the next session's action queue.",
                        "We can't queue it any sooner than this without going into the",
                        "initializer..."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "initializer",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_approve",
                      "fields": [
                        {
                          "name": "up_to",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a signal to the consensus engine to forcibly act as though all parachain",
                        "blocks in all relay chain blocks up to and including the given number in the current",
                        "chain are valid and should be finalized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "dmp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "ump",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight upward message.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight message to service.",
                        "- `weight_limit`: The amount of weight that message execution may take.",
                        "",
                        "Errors:",
                        "- `UnknownMessageIndex`: Message of `index` is unknown.",
                        "- `WeightOverLimit`: Message execution may use greater than `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "hrmp_init_open_channel",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "proposed_max_capacity",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "proposed_max_message_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Initiate opening a channel from a parachain to a given recipient with given channel",
                        "parameters.",
                        "",
                        "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
                        "- `proposed_max_message_size` - specifies the maximum size of the messages.",
                        "",
                        "These numbers are a subject to the relay-chain configuration limits.",
                        "",
                        "The channel can be opened only after the recipient confirms it and only on a session",
                        "change."
                      ]
                    },
                    {
                      "name": "hrmp_accept_open_channel",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Accept a pending open channel request from the given sender.",
                        "",
                        "The channel will be opened only on the next session boundary."
                      ]
                    },
                    {
                      "name": "hrmp_close_channel",
                      "fields": [
                        {
                          "name": "channel_id",
                          "type": 86,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Initiate unilateral closing of a channel. The origin must be either the sender or the",
                        "recipient in the channel being closed.",
                        "",
                        "The closure can only happen on a session change."
                      ]
                    },
                    {
                      "name": "force_clean_hrmp",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This extrinsic triggers the cleanup of all the HRMP storage items that",
                        "a para may have. Normally this happens once per session, but this allows",
                        "you to trigger the cleanup immediately for a specific parachain.",
                        "",
                        "Origin must be Root."
                      ]
                    },
                    {
                      "name": "force_process_hrmp_open",
                      "index": 4,
                      "docs": [
                        "Force process HRMP open channel requests.",
                        "",
                        "If there are pending HRMP open channel requests, you can use this",
                        "function process all of those requests immediately."
                      ]
                    },
                    {
                      "name": "force_process_hrmp_close",
                      "index": 5,
                      "docs": [
                        "Force process HRMP close channel requests.",
                        "",
                        "If there are pending HRMP close channel requests, you can use this",
                        "function process all of those requests immediately."
                      ]
                    },
                    {
                      "name": "hrmp_cancel_open_request",
                      "fields": [
                        {
                          "name": "channel_id",
                          "type": 86,
                          "typeName": "HrmpChannelId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "This cancels a pending open channel request. It can be canceled be either of the sender",
                        "or the recipient for that request. The origin must be either of those.",
                        "",
                        "The cancelling happens immediately. It is not possible to cancel the request if it is",
                        "already accepted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "genesis_head",
                          "type": 78,
                          "typeName": "HeadData"
                        },
                        {
                          "name": "validation_code",
                          "type": 399,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register head data and validation code for a reserved Para Id.",
                        "",
                        "## Arguments",
                        "- `origin`: Must be called by a `Signed` origin.",
                        "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
                        "- `genesis_head`: The genesis head data of the parachain/thread.",
                        "- `validation_code`: The initial validation code of the parachain/thread.",
                        "",
                        "## Deposits/Fees",
                        "The origin signed account must reserve a corresponding deposit for the registration. Anything already",
                        "reserved previously for this para ID is accounted for.",
                        "",
                        "## Events",
                        "The `Registered` event is emitted in case of success."
                      ]
                    },
                    {
                      "name": "force_register",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "genesis_head",
                          "type": 78,
                          "typeName": "HeadData"
                        },
                        {
                          "name": "validation_code",
                          "type": 399,
                          "typeName": "ValidationCode"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Force the registration of a Para Id on the relay chain.",
                        "",
                        "This function must be called by a Root origin.",
                        "",
                        "The deposit taken can be specified for this registration. Any `ParaId`",
                        "can be registered, including sub-1000 IDs which are System Parachains."
                      ]
                    },
                    {
                      "name": "deregister",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Deregister a Para Id, freeing all data and returning any deposit.",
                        "",
                        "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."
                      ]
                    },
                    {
                      "name": "swap",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "other",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Swap a parachain with another parachain or parathread.",
                        "",
                        "The origin must be Root, the `para` owner, or the `para` itself.",
                        "",
                        "The swap will happen only if there is already an opposite swap pending. If there is not,",
                        "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                        "",
                        "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                        "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                        "scheduling info (i.e. whether they're a parathread or parachain), auction information",
                        "and the auction deposit are switched."
                      ]
                    },
                    {
                      "name": "force_remove_lock",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a manager lock from a para. This will allow the manager of a",
                        "previously locked para to deregister or swap a para without using governance.",
                        "",
                        "Can only be called by the Root origin."
                      ]
                    },
                    {
                      "name": "reserve",
                      "index": 5,
                      "docs": [
                        "Reserve a Para Id on the relay chain.",
                        "",
                        "This function will reserve a new Para Id to be owned/managed by the origin account.",
                        "The origin account is able to register head data and validation code using `register` to create",
                        "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.",
                        "",
                        "## Arguments",
                        "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.",
                        "",
                        "## Deposits/Fees",
                        "The origin must reserve a deposit of `ParaDeposit` for the registration.",
                        "",
                        "## Events",
                        "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_lease",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "leaser",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "period_begin",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "period_count",
                          "type": 4,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen",
                        "independently of any other on-chain mechanism to use it.",
                        "",
                        "Can only be called by the Root origin."
                      ]
                    },
                    {
                      "name": "clear_all_leases",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
                        "",
                        "Can only be called by the Root origin."
                      ]
                    },
                    {
                      "name": "trigger_onboard",
                      "fields": [
                        {
                          "name": "para",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Try to onboard a parachain that has a lease for the current lease period.",
                        "",
                        "This function can be useful if there was some state issue with a para that should",
                        "have onboarded, but was unable to. As long as they have a lease period, we can",
                        "let them onboard from here.",
                        "",
                        "Origin must be signed, but can be called by anyone."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_sudo_wrapper",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo_schedule_para_initialize",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "genesis",
                          "type": 418,
                          "typeName": "ParaGenesisArgs"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Schedule a para to be initialized at the start of the next session."
                      ]
                    },
                    {
                      "name": "sudo_schedule_para_cleanup",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Schedule a para to be cleaned up at the start of the next session."
                      ]
                    },
                    {
                      "name": "sudo_schedule_parathread_upgrade",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Upgrade a parathread to a parachain"
                      ]
                    },
                    {
                      "name": "sudo_schedule_parachain_downgrade",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Downgrade a parachain to a parathread"
                      ]
                    },
                    {
                      "name": "sudo_queue_downward_xcm",
                      "fields": [
                        {
                          "name": "id",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "xcm",
                          "type": 419,
                          "typeName": "Box<xcm::opaque::VersionedXcm>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a downward XCM to the given para.",
                        "",
                        "The given parachain should exist and the payload should not exceed the preconfigured size",
                        "`config.max_downward_message_size`."
                      ]
                    },
                    {
                      "name": "sudo_establish_hrmp_channel",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "recipient",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "max_capacity",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Forcefully establish a channel from the sender to the recipient.",
                        "",
                        "This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by",
                        "`Hrmp::hrmp_accept_open_channel`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaGenesisArgs"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "genesis_head",
                      "type": 78,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "validation_code",
                      "type": 399,
                      "typeName": "ValidationCode"
                    },
                    {
                      "name": "parachain",
                      "type": 66,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 420,
                          "typeName": "v0::Xcm<Call>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 425,
                          "typeName": "v1::Xcm<Call>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "v2::Xcm<Call>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 424,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 115,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 420,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 421,
            "type": {
              "def": {
                "sequence": {
                  "type": 422
                }
              }
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 123,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 423,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "def": {
                "sequence": {
                  "type": 420
                }
              }
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 429,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 115,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 93,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 425,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 426,
            "type": {
              "def": {
                "sequence": {
                  "type": 427
                }
              }
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 106,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 428,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 428,
            "type": {
              "def": {
                "sequence": {
                  "type": 425
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "new_auction",
                      "fields": [
                        {
                          "name": "duration",
                          "type": 95,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "lease_period_index",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new auction.",
                        "",
                        "This can only happen when there isn't already an auction in progress and may only be",
                        "called by the root origin. Accepts the `duration` of this auction and the",
                        "`lease_period_index` of the initial lease period of the four that are to be auctioned."
                      ]
                    },
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "para",
                          "type": 431,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "auction_index",
                          "type": 95,
                          "typeName": "AuctionIndex"
                        },
                        {
                          "name": "first_slot",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_slot",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make a new bid from an account (including a parachain account) for deploying a new",
                        "parachain.",
                        "",
                        "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                        "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                        "",
                        "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                        "funded by) the same account.",
                        "- `auction_index` is the index of the auction to bid on. Should just be the present",
                        "value of `AuctionCounter`.",
                        "- `first_slot` is the first lease period index of the range to bid on. This is the",
                        "absolute lease period index value, not an auction-specific offset.",
                        "- `last_slot` is the last lease period index of the range to bid on. This is the",
                        "absolute lease period index value, not an auction-specific offset.",
                        "- `amount` is the amount to bid to be held as deposit for the parachain should the",
                        "bid win. This amount is held throughout the range."
                      ]
                    },
                    {
                      "name": "cancel_auction",
                      "index": 2,
                      "docs": [
                        "Cancel an in-progress auction.",
                        "",
                        "Can only be called by Root origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 431,
            "type": {
              "def": {
                "compact": {
                  "type": 72
                }
              }
            }
          },
          {
            "id": 432,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "index",
                          "type": 431,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_period",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_period",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "end",
                          "type": 95,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "verifier",
                          "type": 433,
                          "typeName": "Option<MultiSigner>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new crowdloaning campaign for a parachain slot with the given lease period range.",
                        "",
                        "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
                        "by the parachain manager."
                      ]
                    },
                    {
                      "name": "contribute",
                      "fields": [
                        {
                          "name": "index",
                          "type": 431,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "value",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "signature",
                          "type": 437,
                          "typeName": "Option<MultiSignature>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                        "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                      ]
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 431,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdraw full balance of a specific contributor.",
                        "",
                        "Origin must be signed, but can come from anyone.",
                        "",
                        "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement",
                        "flag must be set. For a fund to be ready for retirement, then:",
                        "- it must not already be in retirement;",
                        "- the amount of raised funds must be bigger than the _free_ balance of the account;",
                        "- and either:",
                        "  - the block number must be at least `end`; or",
                        "  - the current lease period must be greater than the fund's `last_period`.",
                        "",
                        "In this case, the fund's retirement flag is set and its `end` is reset to the current block",
                        "number.",
                        "",
                        "- `who`: The account whose contribution should be withdrawn.",
                        "- `index`: The parachain to whose crowdloan the contribution was made."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "index",
                          "type": 431,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Automatically refund contributors of an ended crowdloan.",
                        "Due to weight restrictions, this function may need to be called multiple",
                        "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
                        "",
                        "Origin must be signed, but can come from anyone."
                      ]
                    },
                    {
                      "name": "dissolve",
                      "fields": [
                        {
                          "name": "index",
                          "type": 431,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a fund after the retirement period has ended and all funds have been returned."
                      ]
                    },
                    {
                      "name": "edit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 431,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 46,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_period",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_period",
                          "type": 95,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "end",
                          "type": 95,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "verifier",
                          "type": 433,
                          "typeName": "Option<MultiSigner>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Edit the configuration for an in-progress crowdloan.",
                        "",
                        "Can only be called by Root origin."
                      ]
                    },
                    {
                      "name": "add_memo",
                      "fields": [
                        {
                          "name": "index",
                          "type": 72,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "memo",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Add an optional memo to an existing crowdloan contribution.",
                        "",
                        "Origin must be Signed, and the user must have contributed to the crowdloan."
                      ]
                    },
                    {
                      "name": "poke",
                      "fields": [
                        {
                          "name": "index",
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Poke the fund into `NewRaise`",
                        "",
                        "Origin must be Signed, and the fund has non-zero raise."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 434
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 434
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 434,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSigner"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "ed25519::Public"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "sr25519::Public"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 435,
                          "typeName": "ecdsa::Public"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 436,
                      "typeName": "[u8; 33]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 436,
            "type": {
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 437,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 438
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 438
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 246,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 439,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 440,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 419,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
                        "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
                        "local weights.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `dest_weight`: Equal to the total weight on `dest` of the XCM message",
                        "  `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                        "a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
                        "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
                        "local weights.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 442,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 92,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 222,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 119,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                        "a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 119,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `dest_weight`: Equal to the total weight on `dest` of the XCM message",
                        "  `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 443,
                          "typeName": "v0::Xcm<Call>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 448,
                          "typeName": "v1::Xcm<Call>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 452,
                          "typeName": "v2::Xcm<Call>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 444,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 444,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 444,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 424,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 447,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 443,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "def": {
                "sequence": {
                  "type": 445
                }
              }
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 421,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 124,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 123,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 446,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 446,
            "type": {
              "def": {
                "sequence": {
                  "type": 443
                }
              }
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 449,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 449,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 449,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 429,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 447,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 93,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 448,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 449,
            "type": {
              "def": {
                "sequence": {
                  "type": 450
                }
              }
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 426,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 106,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 451,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 451,
            "type": {
              "def": {
                "sequence": {
                  "type": 448
                }
              }
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 453,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 453,
            "type": {
              "def": {
                "sequence": {
                  "type": 454
                }
              }
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 111,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 97,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 447,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 95,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 95,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 104,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 101,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 92,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 116,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 106,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 119,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 452,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 452,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 104,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 97,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 97,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 455,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 457,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "info",
                      "type": 271,
                      "typeName": "IdentityInfo<MaxAdditionalFields>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 458
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 459,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 458,
            "type": {
              "def": {
                "tuple": [
                  4,
                  309
                ]
              }
            }
          },
          {
            "id": 459,
            "type": {
              "def": {
                "sequence": {
                  "type": 458
                }
              }
            }
          },
          {
            "id": 460,
            "type": {
              "def": {
                "tuple": [
                  6,
                  461
                ]
              }
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 193,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 463
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 465,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 464
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 464
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fields",
                      "type": 307,
                      "typeName": "IdentityFields"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 465,
            "type": {
              "def": {
                "sequence": {
                  "type": 463
                }
              }
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "pallet_recovery",
                "RecoveryConfig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delay_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "friends",
                      "type": 193,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "threshold",
                      "type": 61,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 468,
            "type": {
              "def": {
                "tuple": [
                  0,
                  0
                ]
              }
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "pallet_recovery",
                "ActiveRecovery"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "created",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "friends",
                      "type": 193,
                      "typeName": "Vec<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAllowed",
                      "index": 0,
                      "docs": [
                        "User is not allowed to make a call on behalf of this account"
                      ]
                    },
                    {
                      "name": "ZeroThreshold",
                      "index": 1,
                      "docs": [
                        "Threshold must be greater than zero"
                      ]
                    },
                    {
                      "name": "NotEnoughFriends",
                      "index": 2,
                      "docs": [
                        "Friends list must be greater than zero and threshold"
                      ]
                    },
                    {
                      "name": "MaxFriends",
                      "index": 3,
                      "docs": [
                        "Friends list must be less than max friends"
                      ]
                    },
                    {
                      "name": "NotSorted",
                      "index": 4,
                      "docs": [
                        "Friends list must be sorted and free of duplicates"
                      ]
                    },
                    {
                      "name": "NotRecoverable",
                      "index": 5,
                      "docs": [
                        "This account is not set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyRecoverable",
                      "index": 6,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyStarted",
                      "index": 7,
                      "docs": [
                        "A recovery process has already started for this account"
                      ]
                    },
                    {
                      "name": "NotStarted",
                      "index": 8,
                      "docs": [
                        "A recovery process has not started for this rescuer"
                      ]
                    },
                    {
                      "name": "NotFriend",
                      "index": 9,
                      "docs": [
                        "This account is not a friend who can vouch"
                      ]
                    },
                    {
                      "name": "DelayPeriod",
                      "index": 10,
                      "docs": [
                        "The friend must wait until the delay period to vouch for this recovery"
                      ]
                    },
                    {
                      "name": "AlreadyVouched",
                      "index": 11,
                      "docs": [
                        "This user has already vouched for this recovery"
                      ]
                    },
                    {
                      "name": "Threshold",
                      "index": 12,
                      "docs": [
                        "The threshold for recovering this account has not been met"
                      ]
                    },
                    {
                      "name": "StillActive",
                      "index": 13,
                      "docs": [
                        "There are still active recovery attempts that need to be closed"
                      ]
                    },
                    {
                      "name": "AlreadyProxy",
                      "index": 14,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "BadState",
                      "index": 15,
                      "docs": [
                        "Some internal state is broken."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 312
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 472,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 472,
            "type": {
              "def": {
                "sequence": {
                  "type": 312
                }
              }
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 475,
            "type": {
              "def": {
                "sequence": {
                  "type": 476
                }
              }
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 477
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 477
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV2"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 269
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 478
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 55,
                      "typeName": "Option<Vec<u8>>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 269,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 314,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 478,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 478,
            "type": {
              "path": [
                "westend_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 479,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainsOrigin",
                      "fields": [
                        {
                          "type": 480,
                          "typeName": "parachains_origin::Origin"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "XcmPallet",
                      "fields": [
                        {
                          "type": 481,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 482,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "frame_system",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "origin",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 481,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "pallet_scheduler",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 485,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 486,
            "type": {
              "def": {
                "tuple": [
                  487,
                  6
                ]
              }
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 488
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 489,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 60
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "proxy_type",
                      "type": 60,
                      "typeName": "ProxyType"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 489,
            "type": {
              "def": {
                "sequence": {
                  "type": 488
                }
              }
            }
          },
          {
            "id": 490,
            "type": {
              "def": {
                "tuple": [
                  491,
                  6
                ]
              }
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 492
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 493,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 493,
            "type": {
              "def": {
                "sequence": {
                  "type": 492
                }
              }
            }
          },
          {
            "id": 494,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 495,
            "type": {
              "def": {
                "tuple": [
                  0,
                  1
                ]
              }
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 63,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 193,
                      "typeName": "Vec<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 497,
            "type": {
              "def": {
                "tuple": [
                  10,
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 499,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "Phase"
              ],
              "params": [
                {
                  "name": "Bn",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Off",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "index": 1
                    },
                    {
                      "name": "Unsigned",
                      "fields": [
                        {
                          "type": 500,
                          "typeName": "(bool, Bn)"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Emergency",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 500,
            "type": {
              "def": {
                "tuple": [
                  66,
                  4
                ]
              }
            }
          },
          {
            "id": 501,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ReadySolution"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "supports",
                      "type": 376,
                      "typeName": "Supports<A>"
                    },
                    {
                      "name": "score",
                      "type": 373,
                      "typeName": "ElectionScore"
                    },
                    {
                      "name": "compute",
                      "type": 65,
                      "typeName": "ElectionCompute"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 502,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RoundSnapshot"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 503,
                      "typeName": "Vec<(A, VoteWeight, Vec<A>)>"
                    },
                    {
                      "name": "targets",
                      "type": 193,
                      "typeName": "Vec<A>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 503,
            "type": {
              "def": {
                "sequence": {
                  "type": 504
                }
              }
            }
          },
          {
            "id": 504,
            "type": {
              "def": {
                "tuple": [
                  0,
                  8,
                  193
                ]
              }
            }
          },
          {
            "id": 505,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 373
                },
                {
                  "name": "V",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 506,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 373
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 507
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 507,
            "type": {
              "def": {
                "sequence": {
                  "type": 508
                }
              }
            }
          },
          {
            "id": 508,
            "type": {
              "def": {
                "tuple": [
                  373,
                  4
                ]
              }
            }
          },
          {
            "id": 509,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "signed",
                "SignedSubmission"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Solution",
                  "type": 322
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "raw_solution",
                      "type": 321,
                      "typeName": "RawSolution<Solution>"
                    },
                    {
                      "name": "reward",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreDispatchEarlySubmission",
                      "index": 0,
                      "docs": [
                        "Submission was too early."
                      ]
                    },
                    {
                      "name": "PreDispatchWrongWinnerCount",
                      "index": 1,
                      "docs": [
                        "Wrong number of winners presented."
                      ]
                    },
                    {
                      "name": "PreDispatchWeakSubmission",
                      "index": 2,
                      "docs": [
                        "Submission was too weak, score-wise."
                      ]
                    },
                    {
                      "name": "SignedQueueFull",
                      "index": 3,
                      "docs": [
                        "The queue was full, and the solution was not better than any of the existing ones."
                      ]
                    },
                    {
                      "name": "SignedCannotPayDeposit",
                      "index": 4,
                      "docs": [
                        "The origin failed to pay the deposit."
                      ]
                    },
                    {
                      "name": "SignedInvalidWitness",
                      "index": 5,
                      "docs": [
                        "Witness data to dispatchable is invalid."
                      ]
                    },
                    {
                      "name": "SignedTooMuchWeight",
                      "index": 6,
                      "docs": [
                        "The signed submission consumes too much weight"
                      ]
                    },
                    {
                      "name": "OcwCallWrongEra",
                      "index": 7,
                      "docs": [
                        "OCW submitted solution for wrong round"
                      ]
                    },
                    {
                      "name": "MissingSnapshotMetadata",
                      "index": 8,
                      "docs": [
                        "Snapshot metadata should exist but didn't."
                      ]
                    },
                    {
                      "name": "InvalidSubmissionIndex",
                      "index": 9,
                      "docs": [
                        "`Self::insert_submission` returned an invalid index."
                      ]
                    },
                    {
                      "name": "CallNotAllowed",
                      "index": 10,
                      "docs": [
                        "The call is not allowed at this point."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error of the pallet that can be returned in response to dispatches."
              ]
            }
          },
          {
            "id": 511,
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "Node"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "prev",
                      "type": 189,
                      "typeName": "Option<T::AccountId>"
                    },
                    {
                      "name": "next",
                      "type": 189,
                      "typeName": "Option<T::AccountId>"
                    },
                    {
                      "name": "bag_upper",
                      "type": 8,
                      "typeName": "VoteWeight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 512,
            "type": {
              "path": [
                "pallet_bags_list",
                "list",
                "Bag"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "head",
                      "type": 189,
                      "typeName": "Option<T::AccountId>"
                    },
                    {
                      "name": "tail",
                      "type": 189,
                      "typeName": "Option<T::AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 513,
            "type": {
              "def": {
                "sequence": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 514,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "HostConfiguration"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_frequency",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_downward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "ump_service_total_weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hrmp_max_parachain_outbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parathread_outbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_sender_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "hrmp_recipient_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "hrmp_channel_max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_channel_max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parachain_inbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_parathread_inbound_channels",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_channel_max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "code_retention_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "parathread_cores",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "parathread_retries",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "group_rotation_frequency",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "chain_availability_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "thread_availability_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "scheduling_lookahead",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_validators_per_core",
                      "type": 222,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "max_validators",
                      "type": 222,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "dispute_period",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "dispute_post_conclusion_acceptance_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "dispute_max_spam_slots",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "dispute_conclusion_by_time_out_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "no_show_slots",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "n_delay_tranches",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "zeroth_delay_tranche_width",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "needed_approvals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "relay_vrf_modulo_samples",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "ump_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidNewValue",
                      "index": 0,
                      "docs": [
                        "The new value for a configuration parameter is invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 516,
            "type": {
              "def": {
                "sequence": {
                  "type": 390
                }
              }
            }
          },
          {
            "id": 517,
            "type": {
              "def": {
                "sequence": {
                  "type": 230
                }
              }
            }
          },
          {
            "id": 518,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "AvailabilityBitfieldRecord"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bitfield",
                      "type": 387,
                      "typeName": "AvailabilityBitfield"
                    },
                    {
                      "name": "submitted_at",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "CandidatePendingAvailability"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "core",
                      "type": 79,
                      "typeName": "CoreIndex"
                    },
                    {
                      "name": "hash",
                      "type": 404,
                      "typeName": "CandidateHash"
                    },
                    {
                      "name": "descriptor",
                      "type": 71,
                      "typeName": "CandidateDescriptor<H>"
                    },
                    {
                      "name": "availability_votes",
                      "type": 388,
                      "typeName": "BitVec<BitOrderLsb0, u8>"
                    },
                    {
                      "name": "backers",
                      "type": 388,
                      "typeName": "BitVec<BitOrderLsb0, u8>"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "backed_in_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "backing_group",
                      "type": 80,
                      "typeName": "GroupIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 520,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WrongBitfieldSize",
                      "index": 0,
                      "docs": [
                        "Availability bitfield has unexpected size."
                      ]
                    },
                    {
                      "name": "BitfieldDuplicateOrUnordered",
                      "index": 1,
                      "docs": [
                        "Multiple bitfields submitted by same validator or validators out of order by index."
                      ]
                    },
                    {
                      "name": "ValidatorIndexOutOfBounds",
                      "index": 2,
                      "docs": [
                        "Validator index out of bounds."
                      ]
                    },
                    {
                      "name": "InvalidBitfieldSignature",
                      "index": 3,
                      "docs": [
                        "Invalid signature"
                      ]
                    },
                    {
                      "name": "UnscheduledCandidate",
                      "index": 4,
                      "docs": [
                        "Candidate submitted but para not scheduled."
                      ]
                    },
                    {
                      "name": "CandidateScheduledBeforeParaFree",
                      "index": 5,
                      "docs": [
                        "Candidate scheduled despite pending candidate already existing for the para."
                      ]
                    },
                    {
                      "name": "WrongCollator",
                      "index": 6,
                      "docs": [
                        "Candidate included with the wrong collator."
                      ]
                    },
                    {
                      "name": "ScheduledOutOfOrder",
                      "index": 7,
                      "docs": [
                        "Scheduled cores out of order."
                      ]
                    },
                    {
                      "name": "HeadDataTooLarge",
                      "index": 8,
                      "docs": [
                        "Head data exceeds the configured maximum."
                      ]
                    },
                    {
                      "name": "PrematureCodeUpgrade",
                      "index": 9,
                      "docs": [
                        "Code upgrade prematurely."
                      ]
                    },
                    {
                      "name": "NewCodeTooLarge",
                      "index": 10,
                      "docs": [
                        "Output code is too large"
                      ]
                    },
                    {
                      "name": "CandidateNotInParentContext",
                      "index": 11,
                      "docs": [
                        "Candidate not in parent context."
                      ]
                    },
                    {
                      "name": "InvalidGroupIndex",
                      "index": 12,
                      "docs": [
                        "Invalid group index in core assignment."
                      ]
                    },
                    {
                      "name": "InsufficientBacking",
                      "index": 13,
                      "docs": [
                        "Insufficient (non-majority) backing."
                      ]
                    },
                    {
                      "name": "InvalidBacking",
                      "index": 14,
                      "docs": [
                        "Invalid (bad signature, unknown validator, etc.) backing."
                      ]
                    },
                    {
                      "name": "NotCollatorSigned",
                      "index": 15,
                      "docs": [
                        "Collator did not sign PoV."
                      ]
                    },
                    {
                      "name": "ValidationDataHashMismatch",
                      "index": 16,
                      "docs": [
                        "The validation data hash does not match expected."
                      ]
                    },
                    {
                      "name": "IncorrectDownwardMessageHandling",
                      "index": 17,
                      "docs": [
                        "The downward message queue is not processed correctly."
                      ]
                    },
                    {
                      "name": "InvalidUpwardMessages",
                      "index": 18,
                      "docs": [
                        "At least one upward message sent does not pass the acceptance criteria."
                      ]
                    },
                    {
                      "name": "HrmpWatermarkMishandling",
                      "index": 19,
                      "docs": [
                        "The candidate didn't follow the rules of HRMP watermark advancement."
                      ]
                    },
                    {
                      "name": "InvalidOutboundHrmp",
                      "index": 20,
                      "docs": [
                        "The HRMP messages sent by the candidate is not valid."
                      ]
                    },
                    {
                      "name": "InvalidValidationCodeHash",
                      "index": 21,
                      "docs": [
                        "The validation code hash of the candidate is not valid."
                      ]
                    },
                    {
                      "name": "ParaHeadMismatch",
                      "index": 22,
                      "docs": [
                        "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the",
                        "commitments."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 521,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "ScrapedOnChainVotes"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "backing_validators_per_candidate",
                      "type": 522,
                      "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>"
                    },
                    {
                      "name": "disputes",
                      "type": 402,
                      "typeName": "MultiDisputeStatementSet"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 522,
            "type": {
              "def": {
                "sequence": {
                  "type": 523
                }
              }
            }
          },
          {
            "id": 523,
            "type": {
              "def": {
                "tuple": [
                  70,
                  524
                ]
              }
            }
          },
          {
            "id": 524,
            "type": {
              "def": {
                "sequence": {
                  "type": 525
                }
              }
            }
          },
          {
            "id": 525,
            "type": {
              "def": {
                "tuple": [
                  390,
                  401
                ]
              }
            }
          },
          {
            "id": 526,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras_inherent",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyInclusionInherents",
                      "index": 0,
                      "docs": [
                        "Inclusion inherent called more than once per block."
                      ]
                    },
                    {
                      "name": "InvalidParentHeader",
                      "index": 1,
                      "docs": [
                        "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                        "the parent."
                      ]
                    },
                    {
                      "name": "CandidateConcludedInvalid",
                      "index": 2,
                      "docs": [
                        "Disputed candidate that was concluded invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 527,
            "type": {
              "def": {
                "sequence": {
                  "type": 516
                }
              }
            }
          },
          {
            "id": 528,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "ParathreadClaimQueue"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "queue",
                      "type": 529,
                      "typeName": "Vec<QueuedParathread>"
                    },
                    {
                      "name": "next_core_offset",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 529,
            "type": {
              "def": {
                "sequence": {
                  "type": 530
                }
              }
            }
          },
          {
            "id": 530,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "QueuedParathread"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "claim",
                      "type": 531,
                      "typeName": "ParathreadEntry"
                    },
                    {
                      "name": "core_offset",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 531,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "ParathreadEntry"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "claim",
                      "type": 532,
                      "typeName": "ParathreadClaim"
                    },
                    {
                      "name": "retries",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 532,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "ParathreadClaim"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 72,
                      "typeName": "Id"
                    },
                    {
                      "type": 73,
                      "typeName": "CollatorId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 533,
            "type": {
              "def": {
                "sequence": {
                  "type": 534
                }
              }
            }
          },
          {
            "id": 534,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 535
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 535
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 535,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "CoreOccupied"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parathread",
                      "fields": [
                        {
                          "type": 531,
                          "typeName": "ParathreadEntry"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Parachain",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 536,
            "type": {
              "def": {
                "sequence": {
                  "type": 72
                }
              }
            }
          },
          {
            "id": 537,
            "type": {
              "def": {
                "sequence": {
                  "type": 538
                }
              }
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "CoreAssignment"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "core",
                      "type": 79,
                      "typeName": "CoreIndex"
                    },
                    {
                      "name": "para_id",
                      "type": 72,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "kind",
                      "type": 539,
                      "typeName": "AssignmentKind"
                    },
                    {
                      "name": "group_idx",
                      "type": 80,
                      "typeName": "GroupIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "AssignmentKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "index": 0
                    },
                    {
                      "name": "Parathread",
                      "fields": [
                        {
                          "type": 73,
                          "typeName": "CollatorId"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 540,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaLifecycle"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Onboarding",
                      "index": 0
                    },
                    {
                      "name": "Parathread",
                      "index": 1
                    },
                    {
                      "name": "Parachain",
                      "index": 2
                    },
                    {
                      "name": "UpgradingParathread",
                      "index": 3
                    },
                    {
                      "name": "DowngradingParachain",
                      "index": 4
                    },
                    {
                      "name": "OffboardingParathread",
                      "index": 5
                    },
                    {
                      "name": "OffboardingParachain",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 541,
            "type": {
              "def": {
                "tuple": [
                  72,
                  4
                ]
              }
            }
          },
          {
            "id": 542,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaPastCodeMeta"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "upgrade_times",
                      "type": 543,
                      "typeName": "Vec<ReplacementTimes<N>>"
                    },
                    {
                      "name": "last_pruned",
                      "type": 222,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 543,
            "type": {
              "def": {
                "sequence": {
                  "type": 544
                }
              }
            }
          },
          {
            "id": 544,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ReplacementTimes"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "expected_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "activated_at",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 545,
            "type": {
              "def": {
                "sequence": {
                  "type": 541
                }
              }
            }
          },
          {
            "id": 546,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "UpgradeGoAhead"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Abort",
                      "index": 0
                    },
                    {
                      "name": "GoAhead",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 547,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 548,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotRegistered",
                      "index": 0,
                      "docs": [
                        "Para is not registered in our system."
                      ]
                    },
                    {
                      "name": "CannotOnboard",
                      "index": 1,
                      "docs": [
                        "Para cannot be onboarded because it is already tracked by our system."
                      ]
                    },
                    {
                      "name": "CannotOffboard",
                      "index": 2,
                      "docs": [
                        "Para cannot be offboarded at this time."
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 3,
                      "docs": [
                        "Para cannot be upgraded to a parachain."
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 4,
                      "docs": [
                        "Para cannot be downgraded to a parathread."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 549,
            "type": {
              "def": {
                "sequence": {
                  "type": 550
                }
              }
            }
          },
          {
            "id": 550,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "initializer",
                "BufferedSessionChange"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validators",
                      "type": 517,
                      "typeName": "Vec<ValidatorId>"
                    },
                    {
                      "name": "queued",
                      "type": 517,
                      "typeName": "Vec<ValidatorId>"
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 551,
            "type": {
              "def": {
                "sequence": {
                  "type": 552
                }
              }
            }
          },
          {
            "id": 552,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 10,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 553,
            "type": {
              "def": {
                "tuple": [
                  72,
                  10
                ]
              }
            }
          },
          {
            "id": 554,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "ump",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnknownMessageIndex",
                      "index": 0,
                      "docs": [
                        "The message index given is unknown."
                      ]
                    },
                    {
                      "name": "WeightOverLimit",
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 555,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "HrmpOpenChannelRequest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "confirmed",
                      "type": 66,
                      "typeName": "bool"
                    },
                    {
                      "name": "_age",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "sender_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 556,
            "type": {
              "def": {
                "sequence": {
                  "type": 86
                }
              }
            }
          },
          {
            "id": 557,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "HrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 558,
                      "typeName": "Option<Hash>"
                    },
                    {
                      "name": "sender_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "recipient_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 558,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 559,
            "type": {
              "def": {
                "sequence": {
                  "type": 560
                }
              }
            }
          },
          {
            "id": 560,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 561,
            "type": {
              "def": {
                "sequence": {
                  "type": 562
                }
              }
            }
          },
          {
            "id": 562,
            "type": {
              "def": {
                "tuple": [
                  4,
                  536
                ]
              }
            }
          },
          {
            "id": 563,
            "type": {
              "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OpenHrmpChannelToSelf",
                      "index": 0,
                      "docs": [
                        "The sender tried to open a channel to themselves."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelInvalidRecipient",
                      "index": 1,
                      "docs": [
                        "The recipient is not a valid para."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelZeroCapacity",
                      "index": 2,
                      "docs": [
                        "The requested capacity is zero."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelCapacityExceedsLimit",
                      "index": 3,
                      "docs": [
                        "The requested capacity exceeds the global limit."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelZeroMessageSize",
                      "index": 4,
                      "docs": [
                        "The requested maximum message size is 0."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelMessageSizeExceedsLimit",
                      "index": 5,
                      "docs": [
                        "The open request requested the message size that exceeds the global limit."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelAlreadyExists",
                      "index": 6,
                      "docs": [
                        "The channel already exists"
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelAlreadyRequested",
                      "index": 7,
                      "docs": [
                        "There is already a request to open the same channel."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelLimitExceeded",
                      "index": 8,
                      "docs": [
                        "The sender already has the maximum number of allowed outbound channels."
                      ]
                    },
                    {
                      "name": "AcceptHrmpChannelDoesntExist",
                      "index": 9,
                      "docs": [
                        "The channel from the sender to the origin doesn't exist."
                      ]
                    },
                    {
                      "name": "AcceptHrmpChannelAlreadyConfirmed",
                      "index": 10,
                      "docs": [
                        "The channel is already confirmed."
                      ]
                    },
                    {
                      "name": "AcceptHrmpChannelLimitExceeded",
                      "index": 11,
                      "docs": [
                        "The recipient already has the maximum number of allowed inbound channels."
                      ]
                    },
                    {
                      "name": "CloseHrmpChannelUnauthorized",
                      "index": 12,
                      "docs": [
                        "The origin tries to close a channel where it is neither the sender nor the recipient."
                      ]
                    },
                    {
                      "name": "CloseHrmpChannelDoesntExist",
                      "index": 13,
                      "docs": [
                        "The channel to be closed doesn't exist."
                      ]
                    },
                    {
                      "name": "CloseHrmpChannelAlreadyUnderway",
                      "index": 14,
                      "docs": [
                        "The channel close request is already requested."
                      ]
                    },
                    {
                      "name": "CancelHrmpOpenChannelUnauthorized",
                      "index": 15,
                      "docs": [
                        "Canceling is requested by neither the sender nor recipient of the open channel request."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelDoesntExist",
                      "index": 16,
                      "docs": [
                        "The open request doesn't exist."
                      ]
                    },
                    {
                      "name": "OpenHrmpChannelAlreadyConfirmed",
                      "index": 17,
                      "docs": [
                        "Cannot cancel an HRMP open channel request because it is already confirmed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 564,
            "type": {
              "def": {
                "sequence": {
                  "type": 231
                }
              }
            }
          },
          {
            "id": 565,
            "type": {
              "path": [
                "polkadot_primitives",
                "v1",
                "SessionInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validators",
                      "type": 517,
                      "typeName": "Vec<ValidatorId>"
                    },
                    {
                      "name": "discovery_keys",
                      "type": 566,
                      "typeName": "Vec<AuthorityDiscoveryId>"
                    },
                    {
                      "name": "assignment_keys",
                      "type": 564,
                      "typeName": "Vec<AssignmentId>"
                    },
                    {
                      "name": "validator_groups",
                      "type": 527,
                      "typeName": "Vec<Vec<ValidatorIndex>>"
                    },
                    {
                      "name": "n_cores",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "zeroth_delay_tranche_width",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "relay_vrf_modulo_samples",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "n_delay_tranches",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "no_show_slots",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "needed_approvals",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 566,
            "type": {
              "def": {
                "sequence": {
                  "type": 232
                }
              }
            }
          },
          {
            "id": 567,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "ParaInfo"
              ],
              "params": [
                {
                  "name": "Account",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "manager",
                      "type": 0,
                      "typeName": "Account"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "locked",
                      "type": 66,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 568,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotRegistered",
                      "index": 0,
                      "docs": [
                        "The ID is not registered."
                      ]
                    },
                    {
                      "name": "AlreadyRegistered",
                      "index": 1,
                      "docs": [
                        "The ID is already registered."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 2,
                      "docs": [
                        "The caller is not the owner of this Id."
                      ]
                    },
                    {
                      "name": "CodeTooLarge",
                      "index": 3,
                      "docs": [
                        "Invalid para code size."
                      ]
                    },
                    {
                      "name": "HeadDataTooLarge",
                      "index": 4,
                      "docs": [
                        "Invalid para head data size."
                      ]
                    },
                    {
                      "name": "NotParachain",
                      "index": 5,
                      "docs": [
                        "Para is not a Parachain."
                      ]
                    },
                    {
                      "name": "NotParathread",
                      "index": 6,
                      "docs": [
                        "Para is not a Parathread."
                      ]
                    },
                    {
                      "name": "CannotDeregister",
                      "index": 7,
                      "docs": [
                        "Cannot deregister para"
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 8,
                      "docs": [
                        "Cannot schedule downgrade of parachain to parathread"
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 9,
                      "docs": [
                        "Cannot schedule upgrade of parathread to parachain"
                      ]
                    },
                    {
                      "name": "ParaLocked",
                      "index": 10,
                      "docs": [
                        "Para is locked from manipulation by the manager. Must use parachain or relay chain governance."
                      ]
                    },
                    {
                      "name": "NotReserved",
                      "index": 11,
                      "docs": [
                        "The ID given for registration has not been reserved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 569,
            "type": {
              "def": {
                "sequence": {
                  "type": 570
                }
              }
            }
          },
          {
            "id": 570,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 212
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 212
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 571,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParaNotOnboarding",
                      "index": 0,
                      "docs": [
                        "The parachain ID is not onboarding."
                      ]
                    },
                    {
                      "name": "LeaseError",
                      "index": 1,
                      "docs": [
                        "There was an error with the lease."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 572,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "paras_sudo_wrapper",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParaDoesntExist",
                      "index": 0,
                      "docs": [
                        "The specified parachain or parathread is not registered."
                      ]
                    },
                    {
                      "name": "ParaAlreadyExists",
                      "index": 1,
                      "docs": [
                        "The specified parachain or parathread is already registered."
                      ]
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 2,
                      "docs": [
                        "A DMP message couldn't be sent because it exceeds the maximum size allowed for a downward",
                        "message."
                      ]
                    },
                    {
                      "name": "CouldntCleanup",
                      "index": 3,
                      "docs": [
                        "Could not schedule para cleanup."
                      ]
                    },
                    {
                      "name": "NotParathread",
                      "index": 4,
                      "docs": [
                        "Not a parathread."
                      ]
                    },
                    {
                      "name": "NotParachain",
                      "index": 5,
                      "docs": [
                        "Not a parachain."
                      ]
                    },
                    {
                      "name": "CannotUpgrade",
                      "index": 6,
                      "docs": [
                        "Cannot upgrade parathread."
                      ]
                    },
                    {
                      "name": "CannotDowngrade",
                      "index": 7,
                      "docs": [
                        "Cannot downgrade parachain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 573,
            "type": {
              "def": {
                "tuple": [
                  0,
                  72
                ]
              }
            }
          },
          {
            "id": 574,
            "type": {
              "def": {
                "array": {
                  "len": 36,
                  "type": 575
                }
              }
            }
          },
          {
            "id": 575,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 576
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 576
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 576,
            "type": {
              "def": {
                "tuple": [
                  0,
                  72,
                  6
                ]
              }
            }
          },
          {
            "id": 577,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuctionInProgress",
                      "index": 0,
                      "docs": [
                        "This auction is already in progress."
                      ]
                    },
                    {
                      "name": "LeasePeriodInPast",
                      "index": 1,
                      "docs": [
                        "The lease period is in the past."
                      ]
                    },
                    {
                      "name": "ParaNotRegistered",
                      "index": 2,
                      "docs": [
                        "Para is not registered"
                      ]
                    },
                    {
                      "name": "NotCurrentAuction",
                      "index": 3,
                      "docs": [
                        "Not a current auction."
                      ]
                    },
                    {
                      "name": "NotAuction",
                      "index": 4,
                      "docs": [
                        "Not an auction."
                      ]
                    },
                    {
                      "name": "AuctionEnded",
                      "index": 5,
                      "docs": [
                        "Auction has already ended."
                      ]
                    },
                    {
                      "name": "AlreadyLeasedOut",
                      "index": 6,
                      "docs": [
                        "The para is already leased out for part of this range."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 578,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "FundInfo"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "LeasePeriod",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "verifier",
                      "type": 433,
                      "typeName": "Option<MultiSigner>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "raised",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "cap",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "last_contribution",
                      "type": 579,
                      "typeName": "LastContribution<BlockNumber>"
                    },
                    {
                      "name": "first_period",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "last_period",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "trie_index",
                      "type": 4,
                      "typeName": "TrieIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 579,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "LastContribution"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Never",
                      "index": 0
                    },
                    {
                      "name": "PreEnding",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ending",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 580,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 110,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 581,
            "type": {
              "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FirstPeriodInPast",
                      "index": 0,
                      "docs": [
                        "The current lease period is more than the first lease period."
                      ]
                    },
                    {
                      "name": "FirstPeriodTooFarInFuture",
                      "index": 1,
                      "docs": [
                        "The first lease period needs to at least be less than 3 `max_value`."
                      ]
                    },
                    {
                      "name": "LastPeriodBeforeFirstPeriod",
                      "index": 2,
                      "docs": [
                        "Last lease period must be greater than first lease period."
                      ]
                    },
                    {
                      "name": "LastPeriodTooFarInFuture",
                      "index": 3,
                      "docs": [
                        "The last lease period cannot be more than 3 periods after the first period."
                      ]
                    },
                    {
                      "name": "CannotEndInPast",
                      "index": 4,
                      "docs": [
                        "The campaign ends before the current block number. The end must be in the future."
                      ]
                    },
                    {
                      "name": "EndTooFarInFuture",
                      "index": 5,
                      "docs": [
                        "The end date for this crowdloan is not sensible."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 6,
                      "docs": [
                        "There was an overflow."
                      ]
                    },
                    {
                      "name": "ContributionTooSmall",
                      "index": 7,
                      "docs": [
                        "The contribution was below the minimum, `MinContribution`."
                      ]
                    },
                    {
                      "name": "InvalidParaId",
                      "index": 8,
                      "docs": [
                        "Invalid fund index."
                      ]
                    },
                    {
                      "name": "CapExceeded",
                      "index": 9,
                      "docs": [
                        "Contributions exceed maximum amount."
                      ]
                    },
                    {
                      "name": "ContributionPeriodOver",
                      "index": 10,
                      "docs": [
                        "The contribution period has already ended."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 11,
                      "docs": [
                        "The origin of this call is invalid."
                      ]
                    },
                    {
                      "name": "NotParachain",
                      "index": 12,
                      "docs": [
                        "This crowdloan does not correspond to a parachain."
                      ]
                    },
                    {
                      "name": "LeaseActive",
                      "index": 13,
                      "docs": [
                        "This parachain lease is still active and retirement cannot yet begin."
                      ]
                    },
                    {
                      "name": "BidOrLeaseActive",
                      "index": 14,
                      "docs": [
                        "This parachain's bid or lease is still active and withdraw cannot yet begin."
                      ]
                    },
                    {
                      "name": "FundNotEnded",
                      "index": 15,
                      "docs": [
                        "The crowdloan has not yet ended."
                      ]
                    },
                    {
                      "name": "NoContributions",
                      "index": 16,
                      "docs": [
                        "There are no contributions stored in this crowdloan."
                      ]
                    },
                    {
                      "name": "NotReadyToDissolve",
                      "index": 17,
                      "docs": [
                        "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."
                      ]
                    },
                    {
                      "name": "InvalidSignature",
                      "index": 18,
                      "docs": [
                        "Invalid signature."
                      ]
                    },
                    {
                      "name": "MemoTooLarge",
                      "index": 19,
                      "docs": [
                        "The provided memo is too large."
                      ]
                    },
                    {
                      "name": "AlreadyInNewRaise",
                      "index": 20,
                      "docs": [
                        "The fund is already in `NewRaise`"
                      ]
                    },
                    {
                      "name": "VrfDelayInProgress",
                      "index": 21,
                      "docs": [
                        "No contributions allowed during the VRF delay"
                      ]
                    },
                    {
                      "name": "NoLeasePeriod",
                      "index": 22,
                      "docs": [
                        "A lease period has not started yet, due to an offset in the starting block."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 582,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 126,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "maybe_notify",
                          "type": 583,
                          "typeName": "Option<(u8, u8)>"
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 126,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "is_active",
                          "type": 66,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 585,
                          "typeName": "VersionedResponse"
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 583,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 584
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 584
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 584,
            "type": {
              "def": {
                "tuple": [
                  2,
                  2
                ]
              }
            }
          },
          {
            "id": 585,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 424,
                          "typeName": "v0::Response"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 429,
                          "typeName": "v1::Response"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "v2::Response"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 586,
            "type": {
              "def": {
                "tuple": [
                  4,
                  126
                ]
              }
            }
          },
          {
            "id": 587,
            "type": {
              "def": {
                "tuple": [
                  8,
                  8,
                  4
                ]
              }
            }
          },
          {
            "id": 588,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 589
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 590,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 589,
            "type": {
              "def": {
                "tuple": [
                  126,
                  4
                ]
              }
            }
          },
          {
            "id": 590,
            "type": {
              "def": {
                "sequence": {
                  "type": 589
                }
              }
            }
          },
          {
            "id": 591,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "index": 0
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "index": 1
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "Option<Vec<u8>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 592,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 593,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 180
                },
                {
                  "name": "Call",
                  "type": 269
                },
                {
                  "name": "Signature",
                  "type": 438
                },
                {
                  "name": "Extra",
                  "type": 594
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 594,
            "type": {
              "def": {
                "tuple": [
                  595,
                  596,
                  597,
                  598,
                  600,
                  601,
                  602
                ]
              }
            }
          },
          {
            "id": 595,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 596,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 597,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 598,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 599,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 599,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 600,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 95,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 601,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 602,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 46,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 603,
            "type": {
              "path": [
                "westend_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 18
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 129
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 130
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 66
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 66
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 127
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 132
          },
          "event": {
            "ty": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 137,
              "value": [
                0,
                242,
                5,
                42,
                1,
                0,
                0,
                0,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                64,
                89,
                115,
                7,
                0,
                0,
                0,
                0,
                1,
                192,
                118,
                108,
                143,
                88,
                1,
                0,
                0,
                1,
                0,
                152,
                247,
                62,
                93,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                89,
                115,
                7,
                0,
                0,
                0,
                0,
                1,
                192,
                254,
                190,
                249,
                204,
                1,
                0,
                0,
                1,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                1,
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                64,
                89,
                115,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 141,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                96,
                9,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 143,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 144,
              "value": [
                28,
                119,
                101,
                115,
                116,
                101,
                110,
                100,
                56,
                112,
                97,
                114,
                105,
                116,
                121,
                45,
                119,
                101,
                115,
                116,
                101,
                110,
                100,
                2,
                0,
                0,
                0,
                162,
                35,
                0,
                0,
                0,
                0,
                0,
                0,
                56,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                3,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                1,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                5,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                175,
                44,
                2,
                151,
                162,
                62,
                109,
                61,
                1,
                0,
                0,
                0,
                73,
                234,
                175,
                27,
                84,
                138,
                12,
                176,
                1,
                0,
                0,
                0,
                145,
                213,
                223,
                24,
                176,
                210,
                207,
                88,
                1,
                0,
                0,
                0,
                237,
                153,
                197,
                172,
                178,
                94,
                237,
                245,
                3,
                0,
                0,
                0,
                203,
                202,
                37,
                227,
                159,
                20,
                35,
                135,
                2,
                0,
                0,
                0,
                104,
                122,
                212,
                74,
                211,
                127,
                3,
                194,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                1,
                0,
                0,
                0,
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 61,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 148
          },
          "index": 0
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "entries": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 149
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 153
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 153
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "ty": {
                  "Plain": 1
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 154
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "ty": {
                  "Plain": 1
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 149
                },
                "default": [
                  0
                ],
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a tradeoff between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 157
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "ty": {
                  "Plain": 159
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "ty": {
                  "Plain": 159
                },
                "default": [
                  0
                ],
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_initialize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "ty": {
                  "Plain": 54
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "ty": {
                  "Plain": 160
                },
                "default": [
                  0
                ],
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "ty": {
                  "Plain": 160
                },
                "default": [
                  0
                ],
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 161
          },
          "event": null,
          "constants": [
            {
              "name": "EpochDuration",
              "ty": 8,
              "value": [
                88,
                2,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "ty": 8,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                160,
                134,
                1,
                0
              ],
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "error": {
            "ty": 166
          },
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 66
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 167
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 8,
              "value": [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 2
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "entries": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 168
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The lookup from index to account."
                ]
              }
            ]
          },
          "calls": {
            "ty": 169
          },
          "event": {
            "ty": 28
          },
          "constants": [
            {
              "name": "Deposit",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit needed for reserving an index."
              ]
            }
          ],
          "error": {
            "ty": 170
          },
          "index": 3
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 171
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 175
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 178
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 179
          },
          "event": {
            "ty": 29
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 182
          },
          "index": 4
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 183
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 184
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "ty": 6,
              "value": [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "ty": 185,
              "value": [
                4,
                8,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "error": null,
          "index": 26
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 187
                },
                "default": [
                  0
                ],
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 66
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 190
          },
          "event": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "error": {
            "ty": 192
          },
          "index": 5
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "entries": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  84,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                  " always be in history. I.e. `active_era > current_era - history_depth` must be",
                  " guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "ty": {
                  "Plain": 193
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 194
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 198
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 199
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " When updating this storage item, you must also update the `CounterForValidators`."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A tracker to keep count of the number of items in the `Validators` map."
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 201
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                  "",
                  " When updating this storage item, you must also update the `CounterForNominators`."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A tracker to keep count of the number of items in the `Nominators` map."
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "ty": {
                  "Plain": 202
                },
                "default": [
                  0
                ],
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 203,
                    "value": 45
                  }
                },
                "default": [
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 203,
                    "value": 45
                  }
                },
                "default": [
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 203,
                    "value": 199
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 204
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "ty": {
                  "Plain": 208
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "ty": {
                  "Plain": 133
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 209
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "ty": {
                  "Plain": 129
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 203,
                    "value": 213
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 203,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 214
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 207,
                    "value": 215
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The earliest era for which we have a pending, unapplied slash."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 216
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 218
                },
                "default": [
                  7
                ],
                "docs": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v7.0.0 for new networks."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "ty": {
                  "Plain": 219
                },
                "default": [
                  0
                ],
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 220
          },
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "SessionsPerEra",
              "ty": 4,
              "value": [
                6,
                0,
                0,
                0
              ],
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "ty": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "ty": 4,
              "value": [
                27,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "ty": 4,
              "value": [
                64,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "MaxNominations",
              "ty": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 224
          },
          "index": 6
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "entries": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 225
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 226,
                    "value": 128
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 33,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 32
          },
          "constants": [],
          "error": null,
          "index": 7
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 27
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 193
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 66
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 227
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 197
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 229
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 233,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 235
          },
          "event": {
            "ty": 34
          },
          "constants": [],
          "error": {
            "ty": 236
          },
          "index": 8
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": "Default",
                "ty": {
                  "Plain": 237
                },
                "default": [
                  0
                ],
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 238
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "ty": {
                  "Plain": 54
                },
                "default": [
                  0
                ],
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "ty": 240
          },
          "event": {
            "ty": 35
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                160,
                134,
                1,
                0
              ],
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "error": {
            "ty": 251
          },
          "index": 10
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "entries": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "ty": {
                  "Plain": 252
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 54,
                    "value": 254
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 203,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": {
            "ty": 259
          },
          "event": {
            "ty": 40
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "ty": 8,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "error": {
            "ty": 266
          },
          "index": 11
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 12
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 267
          },
          "event": {
            "ty": 49
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                13,
                210,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 455
          },
          "index": 16
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 456
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 306
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 460
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "ty": {
                  "Plain": 462
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "ty": 270
          },
          "event": {
            "ty": 50
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "ty": 6,
              "value": [
                0,
                168,
                156,
                19,
                70,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "ty": 6,
              "value": [
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": {
            "ty": 466
          },
          "index": 17
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "entries": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 467
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of recoverable accounts and their recovery configuration."
                ]
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 468,
                    "value": 469
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ]
              }
            ]
          },
          "calls": {
            "ty": 310
          },
          "event": {
            "ty": 51
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "ty": 6,
              "value": [
                0,
                80,
                57,
                39,
                140,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ]
            },
            {
              "name": "FriendDepositFactor",
              "ty": 6,
              "value": [
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ]
            },
            {
              "name": "MaxFriends",
              "ty": 61,
              "value": [
                9,
                0
              ],
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration."
              ]
            },
            {
              "name": "RecoveryDeposit",
              "ty": 6,
              "value": [
                0,
                80,
                57,
                39,
                140,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ]
            }
          ],
          "error": {
            "ty": 470
          },
          "index": 18
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 471
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 473
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "ty": 311
          },
          "event": {
            "ty": 52
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "ty": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 474
          },
          "index": 19
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 475
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 54
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 483
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "ty": 313
          },
          "event": {
            "ty": 53
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 8,
              "value": [
                0,
                128,
                110,
                135,
                116,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "error": {
            "ty": 484
          },
          "index": 20
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Default",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 315
          },
          "event": {
            "ty": 58
          },
          "constants": [],
          "error": {
            "ty": 485
          },
          "index": 21
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 486
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 490
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 316
          },
          "event": {
            "ty": 59
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "ty": 6,
              "value": [
                0,
                148,
                124,
                236,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "ty": 6,
              "value": [
                128,
                0,
                89,
                98,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "ty": 6,
              "value": [
                0,
                148,
                124,
                236,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "ty": 6,
              "value": [
                0,
                1,
                178,
                196,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": {
            "ty": 494
          },
          "index": 22
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 495,
                    "value": 496
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 497
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 318
          },
          "event": {
            "ty": 62
          },
          "constants": [
            {
              "name": "DepositBase",
              "ty": 6,
              "value": [
                0,
                188,
                231,
                218,
                233,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "ty": 6,
              "value": [
                0,
                16,
                94,
                95,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "ty": 61,
              "value": [
                100,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": {
            "ty": 498
          },
          "index": 23
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "entries": [
              {
                "name": "Round",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  1,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "ty": {
                  "Plain": 499
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "ty": {
                  "Plain": 501
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "ty": {
                  "Plain": 502
                },
                "default": [
                  0
                ],
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "ty": {
                  "Plain": 374
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "ty": {
                  "Plain": 505
                },
                "default": [
                  0
                ],
                "docs": [
                  " A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
                  " `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 509
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "ty": {
                  "Plain": 373
                },
                "default": [
                  0
                ],
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 320
          },
          "event": {
            "ty": 64
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "ty": 4,
              "value": [
                150,
                0,
                0,
                0
              ],
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "ty": 4,
              "value": [
                150,
                0,
                0,
                0
              ],
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "SolutionImprovementThreshold",
              "ty": 133,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" (in any phase)."
              ]
            },
            {
              "name": "OffchainRepeat",
              "ty": 4,
              "value": [
                37,
                0,
                0,
                0
              ],
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "ty": 8,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                127
              ],
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "MinerMaxWeight",
              "ty": 8,
              "value": [
                192,
                132,
                102,
                101,
                87,
                1,
                0,
                0
              ],
              "docs": [
                " Maximum weight that the miner should consume.",
                "",
                " The miner will ensure that the total weight of the unsigned solution will not exceed",
                " this value, based on [`WeightInfo::submit_unsigned`]."
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "ty": 4,
              "value": [
                128,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "ty": 8,
              "value": [
                192,
                132,
                102,
                101,
                87,
                1,
                0,
                0
              ],
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " This should probably be similar to [`Config::MinerMaxWeight`]."
              ]
            },
            {
              "name": "SignedRewardBase",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "ty": 6,
              "value": [
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "ty": 6,
              "value": [
                89,
                115,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "VoterSnapshotPerBlock",
              "ty": 4,
              "value": [
                228,
                87,
                0,
                0
              ],
              "docs": [
                " The maximum number of voters to put in the snapshot. At the moment, snapshots are only",
                " over a single block, but once multi-block elections are introduced they will take place",
                " over multiple blocks.",
                "",
                " Also, note the data type: If the voters are represented by a `u32` in `type",
                " CompactSolution`, the same `u32` is used here to ensure bounds are respected."
              ]
            },
            {
              "name": "MinerMaxLength",
              "ty": 4,
              "value": [
                0,
                0,
                54,
                0
              ],
              "docs": [
                " Maximum length (bytes) that the mined solution should consume.",
                "",
                " The miner will ensure that the total length of the unsigned solution will not exceed",
                " this value."
              ]
            }
          ],
          "error": {
            "ty": 510
          },
          "index": 24
        },
        {
          "name": "BagsList",
          "storage": {
            "prefix": "BagsList",
            "entries": [
              {
                "name": "CounterForListNodes",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " How many ids are registered."
                ]
              },
              {
                "name": "ListNodes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 511
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A single node, within some bag.",
                  "",
                  " Nodes store links forward and back within their respective bags."
                ]
              },
              {
                "name": "ListBags",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 512
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A bag stored in storage.",
                  "",
                  " Stores a `Bag` struct, which stores head and tail pointers to itself."
                ]
              }
            ]
          },
          "calls": {
            "ty": 379
          },
          "event": {
            "ty": 68
          },
          "constants": [
            {
              "name": "BagThresholds",
              "ty": 513,
              "value": [
                33,
                3,
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                243,
                158,
                128,
                151,
                2,
                0,
                0,
                0,
                168,
                177,
                151,
                226,
                2,
                0,
                0,
                0,
                148,
                73,
                46,
                54,
                3,
                0,
                0,
                0,
                39,
                156,
                58,
                147,
                3,
                0,
                0,
                0,
                3,
                188,
                206,
                250,
                3,
                0,
                0,
                0,
                66,
                192,
                27,
                110,
                4,
                0,
                0,
                0,
                27,
                71,
                117,
                238,
                4,
                0,
                0,
                0,
                56,
                94,
                85,
                125,
                5,
                0,
                0,
                0,
                70,
                220,
                96,
                28,
                6,
                0,
                0,
                0,
                137,
                56,
                108,
                205,
                6,
                0,
                0,
                0,
                182,
                238,
                128,
                146,
                7,
                0,
                0,
                0,
                254,
                126,
                227,
                109,
                8,
                0,
                0,
                0,
                232,
                27,
                26,
                98,
                9,
                0,
                0,
                0,
                176,
                25,
                244,
                113,
                10,
                0,
                0,
                0,
                16,
                53,
                146,
                160,
                11,
                0,
                0,
                0,
                207,
                201,
                111,
                241,
                12,
                0,
                0,
                0,
                65,
                20,
                109,
                104,
                14,
                0,
                0,
                0,
                231,
                155,
                218,
                9,
                16,
                0,
                0,
                0,
                206,
                232,
                133,
                218,
                17,
                0,
                0,
                0,
                40,
                169,
                199,
                223,
                19,
                0,
                0,
                0,
                187,
                112,
                147,
                31,
                22,
                0,
                0,
                0,
                142,
                64,
                137,
                160,
                24,
                0,
                0,
                0,
                129,
                10,
                9,
                106,
                27,
                0,
                0,
                0,
                54,
                106,
                72,
                132,
                30,
                0,
                0,
                0,
                91,
                211,
                106,
                248,
                33,
                0,
                0,
                0,
                128,
                124,
                156,
                208,
                37,
                0,
                0,
                0,
                201,
                85,
                48,
                24,
                42,
                0,
                0,
                0,
                189,
                99,
                193,
                219,
                46,
                0,
                0,
                0,
                113,
                224,
                87,
                41,
                52,
                0,
                0,
                0,
                104,
                144,
                146,
                16,
                58,
                0,
                0,
                0,
                237,
                196,
                212,
                162,
                64,
                0,
                0,
                0,
                105,
                147,
                121,
                243,
                71,
                0,
                0,
                0,
                143,
                216,
                12,
                24,
                80,
                0,
                0,
                0,
                75,
                175,
                138,
                40,
                89,
                0,
                0,
                0,
                106,
                22,
                166,
                63,
                99,
                0,
                0,
                0,
                9,
                149,
                23,
                123,
                110,
                0,
                0,
                0,
                120,
                197,
                244,
                251,
                122,
                0,
                0,
                0,
                98,
                200,
                17,
                231,
                136,
                0,
                0,
                0,
                81,
                191,
                109,
                101,
                152,
                0,
                0,
                0,
                4,
                142,
                171,
                164,
                169,
                0,
                0,
                0,
                84,
                70,
                152,
                215,
                188,
                0,
                0,
                0,
                145,
                202,
                192,
                54,
                210,
                0,
                0,
                0,
                23,
                95,
                24,
                1,
                234,
                0,
                0,
                0,
                189,
                21,
                178,
                124,
                4,
                1,
                0,
                0,
                67,
                53,
                143,
                247,
                33,
                1,
                0,
                0,
                184,
                252,
                132,
                200,
                66,
                1,
                0,
                0,
                153,
                103,
                60,
                80,
                103,
                1,
                0,
                0,
                7,
                228,
                78,
                250,
                143,
                1,
                0,
                0,
                179,
                65,
                131,
                62,
                189,
                1,
                0,
                0,
                2,
                127,
                46,
                162,
                239,
                1,
                0,
                0,
                152,
                131,
                188,
                185,
                39,
                2,
                0,
                0,
                22,
                77,
                101,
                42,
                102,
                2,
                0,
                0,
                180,
                149,
                19,
                172,
                171,
                2,
                0,
                0,
                45,
                142,
                130,
                11,
                249,
                2,
                0,
                0,
                161,
                230,
                152,
                44,
                79,
                3,
                0,
                0,
                166,
                22,
                8,
                13,
                175,
                3,
                0,
                0,
                204,
                157,
                55,
                199,
                25,
                4,
                0,
                0,
                160,
                213,
                132,
                149,
                144,
                4,
                0,
                0,
                66,
                231,
                224,
                213,
                20,
                5,
                0,
                0,
                2,
                140,
                215,
                13,
                168,
                5,
                0,
                0,
                15,
                117,
                10,
                239,
                75,
                6,
                0,
                0,
                234,
                141,
                46,
                92,
                2,
                7,
                0,
                0,
                195,
                203,
                153,
                110,
                205,
                7,
                0,
                0,
                177,
                229,
                113,
                124,
                175,
                8,
                0,
                0,
                170,
                43,
                142,
                31,
                171,
                9,
                0,
                0,
                181,
                193,
                32,
                61,
                195,
                10,
                0,
                0,
                38,
                208,
                61,
                14,
                251,
                11,
                0,
                0,
                112,
                199,
                89,
                41,
                86,
                13,
                0,
                0,
                235,
                173,
                218,
                140,
                216,
                14,
                0,
                0,
                247,
                151,
                219,
                170,
                134,
                16,
                0,
                0,
                207,
                240,
                68,
                118,
                101,
                18,
                0,
                0,
                31,
                38,
                96,
                113,
                122,
                20,
                0,
                0,
                9,
                166,
                17,
                190,
                203,
                22,
                0,
                0,
                29,
                251,
                232,
                47,
                96,
                25,
                0,
                0,
                148,
                58,
                60,
                96,
                63,
                28,
                0,
                0,
                138,
                254,
                137,
                196,
                113,
                31,
                0,
                0,
                206,
                217,
                99,
                199,
                0,
                35,
                0,
                0,
                3,
                169,
                42,
                228,
                246,
                38,
                0,
                0,
                254,
                114,
                238,
                197,
                95,
                43,
                0,
                0,
                54,
                201,
                204,
                105,
                72,
                48,
                0,
                0,
                218,
                227,
                50,
                69,
                191,
                53,
                0,
                0,
                6,
                42,
                116,
                112,
                212,
                59,
                0,
                0,
                124,
                151,
                50,
                214,
                153,
                66,
                0,
                0,
                132,
                163,
                36,
                104,
                35,
                74,
                0,
                0,
                87,
                26,
                212,
                89,
                135,
                82,
                0,
                0,
                231,
                241,
                2,
                98,
                222,
                91,
                0,
                0,
                13,
                184,
                118,
                3,
                68,
                102,
                0,
                0,
                174,
                4,
                1,
                222,
                214,
                113,
                0,
                0,
                125,
                158,
                179,
                8,
                185,
                126,
                0,
                0,
                30,
                4,
                74,
                118,
                16,
                141,
                0,
                0,
                58,
                29,
                240,
                100,
                7,
                157,
                0,
                0,
                224,
                79,
                175,
                218,
                204,
                174,
                0,
                0,
                86,
                121,
                240,
                47,
                149,
                194,
                0,
                0,
                149,
                195,
                170,
                169,
                154,
                216,
                0,
                0,
                150,
                124,
                5,
                37,
                30,
                241,
                0,
                0,
                23,
                122,
                102,
                214,
                103,
                12,
                1,
                0,
                40,
                203,
                31,
                30,
                200,
                42,
                1,
                0,
                250,
                40,
                47,
                117,
                152,
                76,
                1,
                0,
                213,
                125,
                200,
                116,
                60,
                114,
                1,
                0,
                125,
                196,
                179,
                251,
                34,
                156,
                1,
                0,
                54,
                92,
                222,
                116,
                199,
                202,
                1,
                0,
                158,
                184,
                225,
                66,
                179,
                254,
                1,
                0,
                12,
                49,
                174,
                84,
                127,
                56,
                2,
                0,
                95,
                225,
                1,
                232,
                213,
                120,
                2,
                0,
                99,
                115,
                218,
                126,
                116,
                192,
                2,
                0,
                81,
                209,
                166,
                13,
                46,
                16,
                3,
                0,
                199,
                233,
                164,
                104,
                237,
                104,
                3,
                0,
                97,
                192,
                145,
                247,
                183,
                203,
                3,
                0,
                191,
                39,
                161,
                183,
                176,
                57,
                4,
                0,
                123,
                20,
                153,
                148,
                27,
                180,
                4,
                0,
                133,
                35,
                237,
                34,
                97,
                60,
                5,
                0,
                105,
                165,
                212,
                197,
                18,
                212,
                5,
                0,
                236,
                140,
                147,
                77,
                239,
                124,
                6,
                0,
                245,
                170,
                144,
                27,
                232,
                56,
                7,
                0,
                140,
                190,
                93,
                219,
                38,
                10,
                8,
                0,
                2,
                151,
                140,
                225,
                19,
                243,
                8,
                0,
                250,
                227,
                20,
                67,
                93,
                246,
                9,
                0,
                221,
                241,
                45,
                186,
                254,
                22,
                11,
                0,
                46,
                186,
                220,
                111,
                74,
                88,
                12,
                0,
                12,
                85,
                24,
                196,
                242,
                189,
                13,
                0,
                240,
                187,
                84,
                49,
                21,
                76,
                15,
                0,
                73,
                142,
                134,
                107,
                70,
                7,
                17,
                0,
                178,
                193,
                83,
                222,
                159,
                244,
                18,
                0,
                39,
                138,
                47,
                178,
                206,
                25,
                21,
                0,
                178,
                57,
                159,
                132,
                36,
                125,
                23,
                0,
                225,
                153,
                231,
                4,
                170,
                37,
                26,
                0,
                186,
                19,
                245,
                171,
                51,
                27,
                29,
                0,
                38,
                71,
                133,
                204,
                120,
                102,
                32,
                0,
                136,
                191,
                128,
                63,
                45,
                17,
                36,
                0,
                28,
                152,
                35,
                248,
                29,
                38,
                40,
                0,
                204,
                196,
                34,
                212,
                80,
                177,
                44,
                0,
                240,
                136,
                130,
                5,
                40,
                192,
                49,
                0,
                54,
                124,
                109,
                126,
                137,
                97,
                55,
                0,
                110,
                147,
                41,
                211,
                10,
                166,
                61,
                0,
                140,
                188,
                108,
                19,
                34,
                160,
                68,
                0,
                0,
                112,
                243,
                42,
                92,
                100,
                76,
                0,
                180,
                59,
                132,
                105,
                153,
                9,
                85,
                0,
                128,
                180,
                171,
                228,
                80,
                169,
                94,
                0,
                160,
                205,
                169,
                121,
                219,
                95,
                105,
                0,
                76,
                194,
                127,
                76,
                199,
                76,
                117,
                0,
                208,
                172,
                14,
                186,
                52,
                147,
                130,
                0,
                72,
                62,
                12,
                207,
                61,
                90,
                145,
                0,
                104,
                198,
                142,
                116,
                105,
                205,
                161,
                0,
                40,
                30,
                111,
                165,
                43,
                29,
                180,
                0,
                152,
                169,
                35,
                38,
                116,
                127,
                200,
                0,
                240,
                154,
                116,
                99,
                77,
                48,
                223,
                0,
                128,
                205,
                252,
                75,
                141,
                114,
                248,
                0,
                144,
                20,
                96,
                45,
                154,
                144,
                20,
                1,
                240,
                180,
                19,
                217,
                69,
                221,
                51,
                1,
                32,
                151,
                53,
                150,
                193,
                180,
                86,
                1,
                80,
                220,
                251,
                174,
                173,
                125,
                125,
                1,
                224,
                17,
                152,
                185,
                71,
                170,
                168,
                1,
                48,
                199,
                238,
                22,
                187,
                185,
                216,
                1,
                32,
                110,
                72,
                134,
                151,
                57,
                14,
                2,
                160,
                250,
                75,
                29,
                114,
                199,
                73,
                2,
                192,
                17,
                113,
                112,
                181,
                18,
                140,
                2,
                128,
                138,
                22,
                67,
                166,
                222,
                213,
                2,
                192,
                248,
                35,
                177,
                162,
                4,
                40,
                3,
                128,
                175,
                89,
                112,
                162,
                118,
                131,
                3,
                192,
                111,
                45,
                135,
                255,
                65,
                233,
                3,
                64,
                147,
                127,
                172,
                143,
                146,
                90,
                4,
                0,
                145,
                9,
                113,
                23,
                182,
                216,
                4,
                64,
                15,
                223,
                91,
                33,
                32,
                101,
                5,
                0,
                73,
                193,
                73,
                68,
                110,
                1,
                6,
                0,
                142,
                188,
                166,
                229,
                108,
                175,
                6,
                0,
                89,
                86,
                134,
                133,
                28,
                113,
                7,
                128,
                104,
                170,
                52,
                164,
                183,
                72,
                8,
                128,
                161,
                226,
                158,
                82,
                185,
                56,
                9,
                0,
                189,
                171,
                232,
                128,
                228,
                67,
                10,
                0,
                42,
                114,
                180,
                32,
                76,
                109,
                11,
                128,
                241,
                192,
                19,
                51,
                92,
                184,
                12,
                0,
                160,
                60,
                203,
                220,
                227,
                40,
                14,
                128,
                184,
                98,
                154,
                158,
                32,
                195,
                15,
                0,
                222,
                86,
                147,
                210,
                202,
                139,
                17,
                0,
                93,
                127,
                76,
                147,
                35,
                136,
                19,
                0,
                26,
                135,
                223,
                53,
                4,
                190,
                21,
                0,
                167,
                206,
                75,
                132,
                239,
                51,
                24,
                0,
                1,
                16,
                251,
                234,
                36,
                241,
                26,
                0,
                128,
                42,
                229,
                209,
                181,
                253,
                29,
                0,
                34,
                161,
                52,
                96,
                157,
                98,
                33,
                0,
                68,
                33,
                107,
                240,
                218,
                41,
                37,
                0,
                2,
                97,
                241,
                130,
                143,
                94,
                41,
                0,
                102,
                32,
                207,
                133,
                30,
                13,
                46,
                0,
                132,
                16,
                25,
                82,
                82,
                67,
                51,
                0,
                160,
                193,
                143,
                202,
                132,
                16,
                57,
                0,
                38,
                173,
                20,
                147,
                204,
                133,
                63,
                0,
                208,
                205,
                36,
                102,
                47,
                182,
                70,
                0,
                156,
                225,
                154,
                28,
                218,
                182,
                78,
                0,
                88,
                204,
                194,
                12,
                95,
                159,
                87,
                0,
                32,
                10,
                117,
                120,
                251,
                137,
                97,
                0,
                48,
                187,
                187,
                214,
                228,
                147,
                108,
                0,
                96,
                203,
                167,
                220,
                158,
                221,
                120,
                0,
                184,
                59,
                192,
                66,
                91,
                139,
                134,
                0,
                184,
                134,
                35,
                97,
                100,
                197,
                149,
                0,
                248,
                241,
                95,
                220,
                147,
                184,
                166,
                0,
                32,
                106,
                145,
                192,
                214,
                150,
                185,
                0,
                216,
                239,
                226,
                143,
                192,
                151,
                206,
                0,
                104,
                41,
                155,
                245,
                46,
                249,
                229,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " The list of thresholds separating the various bags.",
                "",
                " Ids are separated into unsorted bags according to their vote weight. This specifies the",
                " thresholds separating the bags. An id's bag is the largest bag for which the id's weight",
                " is less than or equal to its upper threshold.",
                "",
                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                " that iteration is _semi-sorted_: ids of higher weight tend to come before ids of lower",
                " weight, but peer ids within a particular bag are sorted in insertion order.",
                "",
                " # Expressing the constant",
                "",
                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                " permitted.",
                "",
                " There is an implied upper limit of `VoteWeight::MAX`; that value does not need to be",
                " specified within the bag. For any two threshold lists, if one ends with",
                " `VoteWeight::MAX`, the other one does not, and they are otherwise equal, the two lists",
                " will behave identically.",
                "",
                " # Calculation",
                "",
                " It is recommended to generate the set of thresholds in a geometric series, such that",
                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                "",
                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                "",
                " # Examples",
                "",
                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                "   iteration is strictly in insertion order.",
                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is equal to 2.",
                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with weight 0 or 1 will fall",
                "   into bag 0, an id with weight 2 will fall into bag 1, etc.",
                "",
                " # Migration",
                "",
                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                " With that `List::migrate` can be called, which will perform the appropriate migration."
              ]
            }
          ],
          "error": null,
          "index": 25
        },
        {
          "name": "ParachainsOrigin",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 41
        },
        {
          "name": "Configuration",
          "storage": {
            "prefix": "Configuration",
            "entries": [
              {
                "name": "ActiveConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 514
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  6,
                  0,
                  0,
                  0,
                  100,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  200,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  200,
                  23,
                  168,
                  4,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The active configuration for the current session."
                ]
              },
              {
                "name": "PendingConfig",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 514
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending configuration (if any) for the next session."
                ]
              }
            ]
          },
          "calls": {
            "ty": 380
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 515
          },
          "index": 42
        },
        {
          "name": "ParasShared",
          "storage": {
            "prefix": "ParasShared",
            "entries": [
              {
                "name": "CurrentSessionIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current session index."
                ]
              },
              {
                "name": "ActiveValidatorIndices",
                "modifier": "Default",
                "ty": {
                  "Plain": 516
                },
                "default": [
                  0
                ],
                "docs": [
                  " All the validators actively participating in parachain consensus.",
                  " Indices are into the broader validator set."
                ]
              },
              {
                "name": "ActiveValidatorKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 517
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain attestation keys of the validators actively participating in parachain consensus.",
                  " This should be the same length as `ActiveValidatorIndices`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 381
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 43
        },
        {
          "name": "ParaInclusion",
          "storage": {
            "prefix": "ParaInclusion",
            "entries": [
              {
                "name": "AvailabilityBitfields",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 390,
                    "value": 518
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The latest bitfield for each validator, referred to by their index in the validator set."
                ]
              },
              {
                "name": "PendingAvailability",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 519
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Candidates pending availability by `ParaId`."
                ]
              },
              {
                "name": "PendingAvailabilityCommitments",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 395
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The commitments of candidates pending availability, by `ParaId`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 382
          },
          "event": {
            "ty": 69
          },
          "constants": [],
          "error": {
            "ty": 520
          },
          "index": 44
        },
        {
          "name": "ParaInherent",
          "storage": {
            "prefix": "ParaInherent",
            "entries": [
              {
                "name": "Included",
                "modifier": "Optional",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the paras inherent was included within this block.",
                  "",
                  " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                  " due to the guarantees of FRAME's storage APIs.",
                  "",
                  " If this is `None` at the end of the block, we panic and render the block invalid."
                ]
              },
              {
                "name": "OnChainVotes",
                "modifier": "Optional",
                "ty": {
                  "Plain": 521
                },
                "default": [
                  0
                ],
                "docs": [
                  " Scraped on chain data for extracting resolved disputes as well as backing votes."
                ]
              }
            ]
          },
          "calls": {
            "ty": 383
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 526
          },
          "index": 45
        },
        {
          "name": "ParaScheduler",
          "storage": {
            "prefix": "ParaScheduler",
            "entries": [
              {
                "name": "ValidatorGroups",
                "modifier": "Default",
                "ty": {
                  "Plain": 527
                },
                "default": [
                  0
                ],
                "docs": [
                  " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                  " broader set of Polkadot validators, but instead just the subset used for parachains during",
                  " this session.",
                  "",
                  " Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.",
                  " Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."
                ]
              },
              {
                "name": "ParathreadQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 528
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A queue of upcoming claims and which core they should be mapped onto.",
                  "",
                  " The number of queued claims is bounded at the `scheduling_lookahead`",
                  " multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."
                ]
              },
              {
                "name": "AvailabilityCores",
                "modifier": "Default",
                "ty": {
                  "Plain": 533
                },
                "default": [
                  0
                ],
                "docs": [
                  " One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be",
                  " temporarily `Some` if scheduled but not occupied.",
                  " The i'th parachain belongs to the i'th core, with the remaining cores all being",
                  " parathread-multiplexers.",
                  "",
                  " Bounded by the maximum of either of these two values:",
                  "   * The number of parachains and parathread multiplexers",
                  "   * The number of validators divided by `configuration.max_validators_per_core`."
                ]
              },
              {
                "name": "ParathreadClaimIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 536
                },
                "default": [
                  0
                ],
                "docs": [
                  " An index used to ensure that only one claim on a parathread exists in the queue or is",
                  " currently being handled by an occupied core.",
                  "",
                  " Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."
                ]
              },
              {
                "name": "SessionStartBlock",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number where the session start occurred. Used to track how many group rotations have occurred.",
                  "",
                  " Note that in the context of parachains modules the session change is signaled during",
                  " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                  " Thus for all intents and purposes the effect of the session change is observed at the",
                  " block following the session change, block number of which we save in this storage value."
                ]
              },
              {
                "name": "Scheduled",
                "modifier": "Default",
                "ty": {
                  "Plain": 537
                },
                "default": [
                  0
                ],
                "docs": [
                  " Currently scheduled cores - free but up to be occupied.",
                  "",
                  " Bounded by the number of cores: one for each parachain and parathread multiplexer.",
                  "",
                  " The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/",
                  " for the upcoming block."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 46
        },
        {
          "name": "Paras",
          "storage": {
            "prefix": "Paras",
            "entries": [
              {
                "name": "Parachains",
                "modifier": "Default",
                "ty": {
                  "Plain": 536
                },
                "default": [
                  0
                ],
                "docs": [
                  " All parachains. Ordered ascending by `ParaId`. Parathreads are not included."
                ]
              },
              {
                "name": "ParaLifecycles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 540
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current lifecycle of a all known Para IDs."
                ]
              },
              {
                "name": "Heads",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 78
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The head-data of every registered para."
                ]
              },
              {
                "name": "CurrentCodeHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 77
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The validation code hash of every live para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 541,
                    "value": 77
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual past code hash, indicated by the para id as well as the block number at which it",
                  " became outdated.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeMeta",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 542
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " Past code of parachains. The parachains themselves may not be registered anymore,",
                  " but we also keep their code on-chain for the same amount of time as outdated code",
                  " to keep it available for secondary checkers."
                ]
              },
              {
                "name": "PastCodePruning",
                "modifier": "Default",
                "ty": {
                  "Plain": 545
                },
                "default": [
                  0
                ],
                "docs": [
                  " Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.",
                  " Note that this is the actual height of the included block, not the expected height at which the",
                  " code upgrade would be applied, although they may be equal.",
                  " This is to ensure the entire acceptance period is covered, not an offset acceptance period starting",
                  " from the time at which the parachain perceives a code upgrade as having occurred.",
                  " Multiple entries for a single para are permitted. Ordered ascending by block number."
                ]
              },
              {
                "name": "FutureCodeUpgrades",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The block number at which the planned code change is expected for a para.",
                  " The change will be applied after the first parablock for this ID included which executes",
                  " in the context of a relay chain block with a number >= `expected_at`."
                ]
              },
              {
                "name": "FutureCodeHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 77
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The actual future code hash of a para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "UpgradeGoAheadSignal",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 546
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.",
                  "",
                  " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                  " performs the checks. It is set at the first relay-chain block when the corresponding parachain",
                  " can switch its upgrade function. As soon as the parachain's block is included, the value",
                  " gets reset to `None`.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 547
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " This is used by the relay-chain to communicate that there are restrictions for performing",
                  " an upgrade for this parachain.",
                  "",
                  " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                  " potential use case is when we want to perform some maintenance (such as storage migration)",
                  " we could restrict upgrades to make the process simpler.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeCooldowns",
                "modifier": "Default",
                "ty": {
                  "Plain": 545
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "UpcomingUpgrades",
                "modifier": "Default",
                "ty": {
                  "Plain": 545
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of upcoming code upgrades. Each item is a pair of which para performs a code",
                  " upgrade and at which relay-chain block it is expected at.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "ActionsQueue",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 536
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The actions to perform during the start of a specific session index."
                ]
              },
              {
                "name": "UpcomingParasGenesis",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 418
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upcoming paras instantiation arguments."
                ]
              },
              {
                "name": "CodeByHashRefs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 77,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of reference on the validation code in [`CodeByHash`] storage."
                ]
              },
              {
                "name": "CodeByHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 77,
                    "value": 399
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code stored by its hash.",
                  "",
                  " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                  " [`PastCodeHash`]."
                ]
              }
            ]
          },
          "calls": {
            "ty": 410
          },
          "event": {
            "ty": 81
          },
          "constants": [],
          "error": {
            "ty": 548
          },
          "index": 47
        },
        {
          "name": "Initializer",
          "storage": {
            "prefix": "Initializer",
            "entries": [
              {
                "name": "HasInitialized",
                "modifier": "Optional",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the parachains modules have been initialized within this block.",
                  "",
                  " Semantically a `bool`, but this guarantees it should never hit the trie,",
                  " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                  "",
                  " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of",
                  " them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for",
                  " the semantics of this variable."
                ]
              },
              {
                "name": "BufferedSessionChanges",
                "modifier": "Default",
                "ty": {
                  "Plain": 549
                },
                "default": [
                  0
                ],
                "docs": [
                  " Buffered session changes along with the block number at which they should be applied.",
                  "",
                  " Typically this will be empty or one element long. Apart from that this item never hits",
                  " the storage.",
                  "",
                  " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                  " upgrade boundaries or if governance intervenes."
                ]
              }
            ]
          },
          "calls": {
            "ty": 411
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 48
        },
        {
          "name": "Dmp",
          "storage": {
            "prefix": "Dmp",
            "entries": [
              {
                "name": "DownwardMessageQueues",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 551
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The downward messages addressed for a certain para."
                ]
              },
              {
                "name": "DownwardMessageQueueHeads",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 9
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A mapping that stores the downward message queue MQC head for each para.",
                  "",
                  " Each link in this chain has a form:",
                  " `(prev_head, B, H(M))`, where",
                  " - `prev_head`: is the previous head hash or zero if none.",
                  " - `B`: is the relay-chain block number in which a message was appended.",
                  " - `H(M)`: is the hash of the message being appended."
                ]
              }
            ]
          },
          "calls": {
            "ty": 412
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 49
        },
        {
          "name": "Ump",
          "storage": {
            "prefix": "Ump",
            "entries": [
              {
                "name": "RelayDispatchQueues",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 136
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages waiting to be handled by the relay-chain originating from a certain parachain.",
                  "",
                  " Note that some upward messages might have been already processed by the inclusion logic. E.g.",
                  " channel management messages.",
                  "",
                  " The messages are processed in FIFO order."
                ]
              },
              {
                "name": "RelayDispatchQueueSize",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 54
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`.",
                  "",
                  " First item in the tuple is the count of messages and second",
                  " is the total length (in bytes) of the message payloads.",
                  "",
                  " Note that this is an auxiliary mapping: it's possible to tell the byte size and the number of",
                  " messages only looking at `RelayDispatchQueues`. This mapping is separate to avoid the cost of",
                  " loading the whole message queue if only the total size and count are required.",
                  "",
                  " Invariant:",
                  " - The set of keys should exactly match the set of keys of `RelayDispatchQueues`."
                ]
              },
              {
                "name": "NeedsDispatch",
                "modifier": "Default",
                "ty": {
                  "Plain": 536
                },
                "default": [
                  0
                ],
                "docs": [
                  " The ordered list of `ParaId`s that have a `RelayDispatchQueue` entry.",
                  "",
                  " Invariant:",
                  " - The set of items from this vector should be exactly the set of the keys in",
                  "   `RelayDispatchQueues` and `RelayDispatchQueueSize`."
                ]
              },
              {
                "name": "NextDispatchRoundStartWith",
                "modifier": "Optional",
                "ty": {
                  "Plain": 72
                },
                "default": [
                  0
                ],
                "docs": [
                  " This is the para that gets will get dispatched first during the next upward dispatchable queue",
                  " execution round.",
                  "",
                  " Invariant:",
                  " - If `Some(para)`, then `para` must be present in `NeedsDispatch`."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 553
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These messages stay there until manually dispatched."
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight` (and thus the lowest free",
                  " index)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 413
          },
          "event": {
            "ty": 82
          },
          "constants": [],
          "error": {
            "ty": 554
          },
          "index": 50
        },
        {
          "name": "Hrmp",
          "storage": {
            "prefix": "Hrmp",
            "entries": [
              {
                "name": "HrmpOpenChannelRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 86,
                    "value": 555
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of pending HRMP open channel requests.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpOpenChannelRequestsList",
                "modifier": "Default",
                "ty": {
                  "Plain": 556
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpOpenChannelRequestCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This mapping tracks how many open channel requests are initiated by a given sender para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has `(X, _)`",
                  " as the number of `HrmpOpenChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpAcceptedChannelRequestCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                  " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpCloseChannelRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 86,
                    "value": 57
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A set of pending HRMP close channel requests that are going to be closed during the session change.",
                  " Used for checking if a given channel is registered for closure.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpCloseChannelRequestsList",
                "modifier": "Default",
                "ty": {
                  "Plain": 556
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpWatermarks",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The HRMP watermark associated with each para.",
                  " Invariant:",
                  " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpChannels",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 86,
                    "value": 557
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP channel data associated with each para.",
                  " Invariant:",
                  " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpIngressChannelsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 536
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Ingress/egress indexes allow to find all the senders and receivers given the opposite",
                  " side. I.e.",
                  "",
                  " (a) ingress index allows to find all the senders for a given recipient.",
                  " (b) egress index allows to find all the recipients for a given sender.",
                  "",
                  " Invariants:",
                  " - for each ingress index entry for `P` each item `I` in the index should present in `HrmpChannels`",
                  "   as `(I, P)`.",
                  " - for each egress index entry for `P` each item `E` in the index should present in `HrmpChannels`",
                  "   as `(P, E)`.",
                  " - there should be no other dangling channels in `HrmpChannels`.",
                  " - the vectors are sorted."
                ]
              },
              {
                "name": "HrmpEgressChannelsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 536
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpChannelContents",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 86,
                    "value": 559
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage for the messages for each channel.",
                  " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
                ]
              },
              {
                "name": "HrmpChannelDigests",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 561
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maintains a mapping that can be used to answer the question:",
                  " What paras sent a message at the given block number for a given receiver.",
                  " Invariants:",
                  " - The inner `Vec<ParaId>` is never empty.",
                  " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                  " - The outer vector is sorted ascending by block number and cannot store two items with the same",
                  "   block number."
                ]
              }
            ]
          },
          "calls": {
            "ty": 414
          },
          "event": {
            "ty": 85
          },
          "constants": [],
          "error": {
            "ty": 563
          },
          "index": 51
        },
        {
          "name": "ParaSessionInfo",
          "storage": {
            "prefix": "ParaSessionInfo",
            "entries": [
              {
                "name": "AssignmentKeysUnsafe",
                "modifier": "Default",
                "ty": {
                  "Plain": 564
                },
                "default": [
                  0
                ],
                "docs": [
                  " Assignment keys for the current session.",
                  " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                  " When in doubt, use `Sessions` API instead."
                ]
              },
              {
                "name": "EarliestStoredSession",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The earliest session for which previous session info is stored."
                ]
              },
              {
                "name": "Sessions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 565
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Session information in a rolling window.",
                  " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                  " Does not have any entries before the session index in the first session change notification."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 52
        },
        {
          "name": "Registrar",
          "storage": {
            "prefix": "Registrar",
            "entries": [
              {
                "name": "PendingSwap",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 72
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending swap operations."
                ]
              },
              {
                "name": "Paras",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 567
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Amount held on deposit for each para and the original depositor.",
                  "",
                  " The given account ID is responsible for registering the code and initial head data, but may only do",
                  " so if it isn't yet registered. (After that, it's up to governance to do so.)"
                ]
              },
              {
                "name": "NextFreeParaId",
                "modifier": "Default",
                "ty": {
                  "Plain": 72
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free `ParaId`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 415
          },
          "event": {
            "ty": 87
          },
          "constants": [
            {
              "name": "ParaDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                229,
                156,
                48,
                18,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit to be paid to run a parathread.",
                " This should include the cost for storing the genesis head and validation code."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [
                128,
                240,
                250,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit to be paid per byte stored on chain."
              ]
            }
          ],
          "error": {
            "ty": 568
          },
          "index": 60
        },
        {
          "name": "Slots",
          "storage": {
            "prefix": "Slots",
            "entries": [
              {
                "name": "Leases",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 569
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Amounts held on deposit for each (possibly future) leased parachain.",
                  "",
                  " The actual amount locked on its behalf by any account at any time is the maximum of the second values",
                  " of the items in this list whose first value is the account.",
                  "",
                  " The first item in the list is the amount locked for the current Lease Period. Following",
                  " items are for the subsequent lease periods.",
                  "",
                  " The default value (an empty list) implies that the parachain no longer exists (or never",
                  " existed) as far as this pallet is concerned.",
                  "",
                  " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                  " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                  " deposit for the non-existent chain currently, but is held at some point in the future.",
                  "",
                  " It is illegal for a `None` value to trail in the list."
                ]
              }
            ]
          },
          "calls": {
            "ty": 416
          },
          "event": {
            "ty": 88
          },
          "constants": [
            {
              "name": "LeasePeriod",
              "ty": 4,
              "value": [
                0,
                39,
                6,
                0
              ],
              "docs": [
                " The number of blocks over which a single period lasts."
              ]
            },
            {
              "name": "LeaseOffset",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of blocks to offset each lease period by."
              ]
            }
          ],
          "error": {
            "ty": 571
          },
          "index": 61
        },
        {
          "name": "ParasSudoWrapper",
          "storage": null,
          "calls": {
            "ty": 417
          },
          "event": null,
          "constants": [],
          "error": {
            "ty": 572
          },
          "index": 62
        },
        {
          "name": "Auctions",
          "storage": {
            "prefix": "Auctions",
            "entries": [
              {
                "name": "AuctionCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of auctions started so far."
                ]
              },
              {
                "name": "AuctionInfo",
                "modifier": "Optional",
                "ty": {
                  "Plain": 54
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information relating to the current auction, if there is one.",
                  "",
                  " The first item in the tuple is the lease period index that the first of the four",
                  " contiguous lease periods on auction is for. The second is the block number when the",
                  " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
                ]
              },
              {
                "name": "ReservedAmounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 573,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Amounts currently reserved in the accounts of the bidders currently winning",
                  " (sub-)ranges."
                ]
              },
              {
                "name": "Winning",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 574
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                  " the current auction. The map's key is the 0-based index into the Sample Size. The",
                  " first sample of the ending period is 0; the last is `Sample Size - 1`."
                ]
              }
            ]
          },
          "calls": {
            "ty": 430
          },
          "event": {
            "ty": 89
          },
          "constants": [
            {
              "name": "EndingPeriod",
              "ty": 4,
              "value": [
                64,
                25,
                1,
                0
              ],
              "docs": [
                " The number of blocks over which an auction may be retroactively ended."
              ]
            },
            {
              "name": "SampleLength",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The length of each sample to take during the ending period.",
                "",
                " `EndingPeriod` / `SampleLength` = Total # of Samples"
              ]
            },
            {
              "name": "SlotRangeCount",
              "ty": 4,
              "value": [
                36,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "LeasePeriodsPerSlot",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 577
          },
          "index": 63
        },
        {
          "name": "Crowdloan",
          "storage": {
            "prefix": "Crowdloan",
            "entries": [
              {
                "name": "Funds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 72,
                    "value": 578
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Info on all of the funds."
                ]
              },
              {
                "name": "NewRaise",
                "modifier": "Default",
                "ty": {
                  "Plain": 536
                },
                "default": [
                  0
                ],
                "docs": [
                  " The funds that have had additional contributions during the last block. This is used",
                  " in order to determine which funds should submit new or updated bids."
                ]
              },
              {
                "name": "EndingsCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of auctions that have entered into their ending period so far."
                ]
              },
              {
                "name": "NextTrieIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next available trie index"
                ]
              }
            ]
          },
          "calls": {
            "ty": 432
          },
          "event": {
            "ty": 90
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 580,
              "value": [
                112,
                121,
                47,
                99,
                102,
                117,
                110,
                100
              ],
              "docs": [
                " `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"
              ]
            },
            {
              "name": "MinContribution",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount that may be contributed into a crowdloan. Should almost certainly be at",
                " least `ExistentialDeposit`."
              ]
            },
            {
              "name": "RemoveKeysLimit",
              "ty": 4,
              "value": [
                244,
                1,
                0,
                0
              ],
              "docs": [
                " Max number of storage keys to remove per extrinsic call."
              ]
            }
          ],
          "error": {
            "ty": 581
          },
          "index": 64
        },
        {
          "name": "XcmPallet",
          "storage": {
            "prefix": "XcmPallet",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 582
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 586,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 586,
                    "value": 8
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 586,
                    "value": 587
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 588
                },
                "default": [
                  0
                ],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 591
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current migration's stage, if any."
                ]
              }
            ]
          },
          "calls": {
            "ty": 441
          },
          "event": {
            "ty": 91
          },
          "constants": [],
          "error": {
            "ty": 592
          },
          "index": 99
        }
      ],
      "extrinsic": {
        "ty": 593,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckSpecVersion",
            "ty": 595,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 596,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 597,
            "additional_signed": 9
          },
          {
            "identifier": "CheckMortality",
            "ty": 598,
            "additional_signed": 9
          },
          {
            "identifier": "CheckNonce",
            "ty": 600,
            "additional_signed": 57
          },
          {
            "identifier": "CheckWeight",
            "ty": 601,
            "additional_signed": 57
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 602,
            "additional_signed": 57
          }
        ]
      },
      "ty": 603
    }
  }
]
